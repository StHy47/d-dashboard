{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "f16e3846",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Choi Hyeji\\anaconda3\\lib\\site-packages\\pandas\\core\\computation\\expressions.py:21: UserWarning: Pandas requires version '2.8.4' or newer of 'numexpr' (version '2.8.3' currently installed).\n",
      "  from pandas.core.computation.check import NUMEXPR_INSTALLED\n",
      "C:\\Users\\Choi Hyeji\\anaconda3\\lib\\site-packages\\pandas\\core\\arrays\\masked.py:60: UserWarning: Pandas requires version '1.3.6' or newer of 'bottleneck' (version '1.3.5' currently installed).\n",
      "  from pandas.core import (\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['성별', '연령', '결혼여부', '부양자유무', '부양자수', '추천횟수', '영수증발급여부', '과금방식', '보안서비스',\n",
      "       '백업서비스', '기술지원서비스', '데이터무제한', '데이터사용량', '이탈가능점수', '로밍사용료', '총과금액',\n",
      "       '연령대', 'tenure', 'avg_monthly_charge', 'std_monthly_charge'],\n",
      "      dtype='object')\n",
      "Best Parameters: {'max_depth': 10, 'min_samples_leaf': 4, 'min_samples_split': 10, 'n_estimators': 200}\n",
      "\n",
      "Cross-validation scores: [0.91968504 0.90649762 0.91365777 0.90937997 0.90909091]\n",
      "Mean CV score: 0.912 (+/- 0.009)\n",
      "\n",
      "Out-of-bag score: 0.958\n",
      "\n",
      "Detailed Classification Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      " Not Churned       0.97      1.00      0.98      1033\n",
      "     Churned       0.99      0.89      0.94       340\n",
      "\n",
      "    accuracy                           0.97      1373\n",
      "   macro avg       0.98      0.95      0.96      1373\n",
      "weighted avg       0.97      0.97      0.97      1373\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Choi Hyeji\\AppData\\Local\\Temp\\ipykernel_22256\\1465888937.py:263: UserWarning: Glyph 51060 (\\N{HANGUL SYLLABLE I}) missing from font(s) DejaVu Sans.\n",
      "  plt.tight_layout()\n",
      "C:\\Users\\Choi Hyeji\\AppData\\Local\\Temp\\ipykernel_22256\\1465888937.py:263: UserWarning: Glyph 53448 (\\N{HANGUL SYLLABLE TAL}) missing from font(s) DejaVu Sans.\n",
      "  plt.tight_layout()\n",
      "C:\\Users\\Choi Hyeji\\AppData\\Local\\Temp\\ipykernel_22256\\1465888937.py:263: UserWarning: Glyph 44032 (\\N{HANGUL SYLLABLE GA}) missing from font(s) DejaVu Sans.\n",
      "  plt.tight_layout()\n",
      "C:\\Users\\Choi Hyeji\\AppData\\Local\\Temp\\ipykernel_22256\\1465888937.py:263: UserWarning: Glyph 45733 (\\N{HANGUL SYLLABLE NEUNG}) missing from font(s) DejaVu Sans.\n",
      "  plt.tight_layout()\n",
      "C:\\Users\\Choi Hyeji\\AppData\\Local\\Temp\\ipykernel_22256\\1465888937.py:263: UserWarning: Glyph 51216 (\\N{HANGUL SYLLABLE JEOM}) missing from font(s) DejaVu Sans.\n",
      "  plt.tight_layout()\n",
      "C:\\Users\\Choi Hyeji\\AppData\\Local\\Temp\\ipykernel_22256\\1465888937.py:263: UserWarning: Glyph 49688 (\\N{HANGUL SYLLABLE SU}) missing from font(s) DejaVu Sans.\n",
      "  plt.tight_layout()\n",
      "C:\\Users\\Choi Hyeji\\AppData\\Local\\Temp\\ipykernel_22256\\1465888937.py:263: UserWarning: Glyph 52509 (\\N{HANGUL SYLLABLE CONG}) missing from font(s) DejaVu Sans.\n",
      "  plt.tight_layout()\n",
      "C:\\Users\\Choi Hyeji\\AppData\\Local\\Temp\\ipykernel_22256\\1465888937.py:263: UserWarning: Glyph 44284 (\\N{HANGUL SYLLABLE GWA}) missing from font(s) DejaVu Sans.\n",
      "  plt.tight_layout()\n",
      "C:\\Users\\Choi Hyeji\\AppData\\Local\\Temp\\ipykernel_22256\\1465888937.py:263: UserWarning: Glyph 44552 (\\N{HANGUL SYLLABLE GEUM}) missing from font(s) DejaVu Sans.\n",
      "  plt.tight_layout()\n",
      "C:\\Users\\Choi Hyeji\\AppData\\Local\\Temp\\ipykernel_22256\\1465888937.py:263: UserWarning: Glyph 50529 (\\N{HANGUL SYLLABLE AEG}) missing from font(s) DejaVu Sans.\n",
      "  plt.tight_layout()\n",
      "C:\\Users\\Choi Hyeji\\AppData\\Local\\Temp\\ipykernel_22256\\1465888937.py:263: UserWarning: Glyph 52628 (\\N{HANGUL SYLLABLE CU}) missing from font(s) DejaVu Sans.\n",
      "  plt.tight_layout()\n",
      "C:\\Users\\Choi Hyeji\\AppData\\Local\\Temp\\ipykernel_22256\\1465888937.py:263: UserWarning: Glyph 52380 (\\N{HANGUL SYLLABLE CEON}) missing from font(s) DejaVu Sans.\n",
      "  plt.tight_layout()\n",
      "C:\\Users\\Choi Hyeji\\AppData\\Local\\Temp\\ipykernel_22256\\1465888937.py:263: UserWarning: Glyph 54943 (\\N{HANGUL SYLLABLE HOES}) missing from font(s) DejaVu Sans.\n",
      "  plt.tight_layout()\n",
      "C:\\Users\\Choi Hyeji\\AppData\\Local\\Temp\\ipykernel_22256\\1465888937.py:263: UserWarning: Glyph 45936 (\\N{HANGUL SYLLABLE DE}) missing from font(s) DejaVu Sans.\n",
      "  plt.tight_layout()\n",
      "C:\\Users\\Choi Hyeji\\AppData\\Local\\Temp\\ipykernel_22256\\1465888937.py:263: UserWarning: Glyph 53552 (\\N{HANGUL SYLLABLE TEO}) missing from font(s) DejaVu Sans.\n",
      "  plt.tight_layout()\n",
      "C:\\Users\\Choi Hyeji\\AppData\\Local\\Temp\\ipykernel_22256\\1465888937.py:263: UserWarning: Glyph 49324 (\\N{HANGUL SYLLABLE SA}) missing from font(s) DejaVu Sans.\n",
      "  plt.tight_layout()\n",
      "C:\\Users\\Choi Hyeji\\AppData\\Local\\Temp\\ipykernel_22256\\1465888937.py:263: UserWarning: Glyph 50857 (\\N{HANGUL SYLLABLE YONG}) missing from font(s) DejaVu Sans.\n",
      "  plt.tight_layout()\n",
      "C:\\Users\\Choi Hyeji\\AppData\\Local\\Temp\\ipykernel_22256\\1465888937.py:263: UserWarning: Glyph 47049 (\\N{HANGUL SYLLABLE RYANG}) missing from font(s) DejaVu Sans.\n",
      "  plt.tight_layout()\n",
      "C:\\Users\\Choi Hyeji\\AppData\\Local\\Temp\\ipykernel_22256\\1465888937.py:263: UserWarning: Glyph 48512 (\\N{HANGUL SYLLABLE BU}) missing from font(s) DejaVu Sans.\n",
      "  plt.tight_layout()\n",
      "C:\\Users\\Choi Hyeji\\AppData\\Local\\Temp\\ipykernel_22256\\1465888937.py:263: UserWarning: Glyph 50577 (\\N{HANGUL SYLLABLE YANG}) missing from font(s) DejaVu Sans.\n",
      "  plt.tight_layout()\n",
      "C:\\Users\\Choi Hyeji\\AppData\\Local\\Temp\\ipykernel_22256\\1465888937.py:263: UserWarning: Glyph 51088 (\\N{HANGUL SYLLABLE JA}) missing from font(s) DejaVu Sans.\n",
      "  plt.tight_layout()\n",
      "C:\\Users\\Choi Hyeji\\AppData\\Local\\Temp\\ipykernel_22256\\1465888937.py:263: UserWarning: Glyph 50976 (\\N{HANGUL SYLLABLE YU}) missing from font(s) DejaVu Sans.\n",
      "  plt.tight_layout()\n",
      "C:\\Users\\Choi Hyeji\\AppData\\Local\\Temp\\ipykernel_22256\\1465888937.py:263: UserWarning: Glyph 47924 (\\N{HANGUL SYLLABLE MU}) missing from font(s) DejaVu Sans.\n",
      "  plt.tight_layout()\n",
      "C:\\Users\\Choi Hyeji\\AppData\\Local\\Temp\\ipykernel_22256\\1465888937.py:263: UserWarning: Glyph 50672 (\\N{HANGUL SYLLABLE YEON}) missing from font(s) DejaVu Sans.\n",
      "  plt.tight_layout()\n",
      "C:\\Users\\Choi Hyeji\\AppData\\Local\\Temp\\ipykernel_22256\\1465888937.py:263: UserWarning: Glyph 47161 (\\N{HANGUL SYLLABLE RYEONG}) missing from font(s) DejaVu Sans.\n",
      "  plt.tight_layout()\n",
      "C:\\Users\\Choi Hyeji\\AppData\\Local\\Temp\\ipykernel_22256\\1465888937.py:263: UserWarning: Glyph 50689 (\\N{HANGUL SYLLABLE YEONG}) missing from font(s) DejaVu Sans.\n",
      "  plt.tight_layout()\n",
      "C:\\Users\\Choi Hyeji\\AppData\\Local\\Temp\\ipykernel_22256\\1465888937.py:263: UserWarning: Glyph 51613 (\\N{HANGUL SYLLABLE JEUNG}) missing from font(s) DejaVu Sans.\n",
      "  plt.tight_layout()\n",
      "C:\\Users\\Choi Hyeji\\AppData\\Local\\Temp\\ipykernel_22256\\1465888937.py:263: UserWarning: Glyph 48156 (\\N{HANGUL SYLLABLE BAL}) missing from font(s) DejaVu Sans.\n",
      "  plt.tight_layout()\n",
      "C:\\Users\\Choi Hyeji\\AppData\\Local\\Temp\\ipykernel_22256\\1465888937.py:263: UserWarning: Glyph 44553 (\\N{HANGUL SYLLABLE GEUB}) missing from font(s) DejaVu Sans.\n",
      "  plt.tight_layout()\n",
      "C:\\Users\\Choi Hyeji\\AppData\\Local\\Temp\\ipykernel_22256\\1465888937.py:263: UserWarning: Glyph 50668 (\\N{HANGUL SYLLABLE YEO}) missing from font(s) DejaVu Sans.\n",
      "  plt.tight_layout()\n",
      "C:\\Users\\Choi Hyeji\\AppData\\Local\\Temp\\ipykernel_22256\\1465888937.py:263: UserWarning: Glyph 48169 (\\N{HANGUL SYLLABLE BANG}) missing from font(s) DejaVu Sans.\n",
      "  plt.tight_layout()\n",
      "C:\\Users\\Choi Hyeji\\AppData\\Local\\Temp\\ipykernel_22256\\1465888937.py:263: UserWarning: Glyph 49885 (\\N{HANGUL SYLLABLE SIG}) missing from font(s) DejaVu Sans.\n",
      "  plt.tight_layout()\n",
      "C:\\Users\\Choi Hyeji\\AppData\\Local\\Temp\\ipykernel_22256\\1465888937.py:263: UserWarning: Glyph 44592 (\\N{HANGUL SYLLABLE GI}) missing from font(s) DejaVu Sans.\n",
      "  plt.tight_layout()\n",
      "C:\\Users\\Choi Hyeji\\AppData\\Local\\Temp\\ipykernel_22256\\1465888937.py:263: UserWarning: Glyph 49696 (\\N{HANGUL SYLLABLE SUL}) missing from font(s) DejaVu Sans.\n",
      "  plt.tight_layout()\n",
      "C:\\Users\\Choi Hyeji\\AppData\\Local\\Temp\\ipykernel_22256\\1465888937.py:263: UserWarning: Glyph 51648 (\\N{HANGUL SYLLABLE JI}) missing from font(s) DejaVu Sans.\n",
      "  plt.tight_layout()\n",
      "C:\\Users\\Choi Hyeji\\AppData\\Local\\Temp\\ipykernel_22256\\1465888937.py:263: UserWarning: Glyph 50896 (\\N{HANGUL SYLLABLE WEON}) missing from font(s) DejaVu Sans.\n",
      "  plt.tight_layout()\n",
      "C:\\Users\\Choi Hyeji\\AppData\\Local\\Temp\\ipykernel_22256\\1465888937.py:263: UserWarning: Glyph 49436 (\\N{HANGUL SYLLABLE SEO}) missing from font(s) DejaVu Sans.\n",
      "  plt.tight_layout()\n",
      "C:\\Users\\Choi Hyeji\\AppData\\Local\\Temp\\ipykernel_22256\\1465888937.py:263: UserWarning: Glyph 48708 (\\N{HANGUL SYLLABLE BI}) missing from font(s) DejaVu Sans.\n",
      "  plt.tight_layout()\n",
      "C:\\Users\\Choi Hyeji\\AppData\\Local\\Temp\\ipykernel_22256\\1465888937.py:263: UserWarning: Glyph 49828 (\\N{HANGUL SYLLABLE SEU}) missing from font(s) DejaVu Sans.\n",
      "  plt.tight_layout()\n",
      "C:\\Users\\Choi Hyeji\\AppData\\Local\\Temp\\ipykernel_22256\\1465888937.py:263: UserWarning: Glyph 48372 (\\N{HANGUL SYLLABLE BO}) missing from font(s) DejaVu Sans.\n",
      "  plt.tight_layout()\n",
      "C:\\Users\\Choi Hyeji\\AppData\\Local\\Temp\\ipykernel_22256\\1465888937.py:263: UserWarning: Glyph 50504 (\\N{HANGUL SYLLABLE AN}) missing from font(s) DejaVu Sans.\n",
      "  plt.tight_layout()\n",
      "C:\\Users\\Choi Hyeji\\AppData\\Local\\Temp\\ipykernel_22256\\1465888937.py:263: UserWarning: Glyph 47196 (\\N{HANGUL SYLLABLE RO}) missing from font(s) DejaVu Sans.\n",
      "  plt.tight_layout()\n",
      "C:\\Users\\Choi Hyeji\\AppData\\Local\\Temp\\ipykernel_22256\\1465888937.py:263: UserWarning: Glyph 48141 (\\N{HANGUL SYLLABLE MING}) missing from font(s) DejaVu Sans.\n",
      "  plt.tight_layout()\n",
      "C:\\Users\\Choi Hyeji\\AppData\\Local\\Temp\\ipykernel_22256\\1465888937.py:263: UserWarning: Glyph 47308 (\\N{HANGUL SYLLABLE RYO}) missing from font(s) DejaVu Sans.\n",
      "  plt.tight_layout()\n",
      "C:\\Users\\Choi Hyeji\\anaconda3\\lib\\site-packages\\IPython\\core\\events.py:89: UserWarning: Glyph 51060 (\\N{HANGUL SYLLABLE I}) missing from font(s) DejaVu Sans.\n",
      "  func(*args, **kwargs)\n",
      "C:\\Users\\Choi Hyeji\\anaconda3\\lib\\site-packages\\IPython\\core\\events.py:89: UserWarning: Glyph 53448 (\\N{HANGUL SYLLABLE TAL}) missing from font(s) DejaVu Sans.\n",
      "  func(*args, **kwargs)\n",
      "C:\\Users\\Choi Hyeji\\anaconda3\\lib\\site-packages\\IPython\\core\\events.py:89: UserWarning: Glyph 44032 (\\N{HANGUL SYLLABLE GA}) missing from font(s) DejaVu Sans.\n",
      "  func(*args, **kwargs)\n",
      "C:\\Users\\Choi Hyeji\\anaconda3\\lib\\site-packages\\IPython\\core\\events.py:89: UserWarning: Glyph 45733 (\\N{HANGUL SYLLABLE NEUNG}) missing from font(s) DejaVu Sans.\n",
      "  func(*args, **kwargs)\n",
      "C:\\Users\\Choi Hyeji\\anaconda3\\lib\\site-packages\\IPython\\core\\events.py:89: UserWarning: Glyph 51216 (\\N{HANGUL SYLLABLE JEOM}) missing from font(s) DejaVu Sans.\n",
      "  func(*args, **kwargs)\n",
      "C:\\Users\\Choi Hyeji\\anaconda3\\lib\\site-packages\\IPython\\core\\events.py:89: UserWarning: Glyph 49688 (\\N{HANGUL SYLLABLE SU}) missing from font(s) DejaVu Sans.\n",
      "  func(*args, **kwargs)\n",
      "C:\\Users\\Choi Hyeji\\anaconda3\\lib\\site-packages\\IPython\\core\\events.py:89: UserWarning: Glyph 52509 (\\N{HANGUL SYLLABLE CONG}) missing from font(s) DejaVu Sans.\n",
      "  func(*args, **kwargs)\n",
      "C:\\Users\\Choi Hyeji\\anaconda3\\lib\\site-packages\\IPython\\core\\events.py:89: UserWarning: Glyph 44284 (\\N{HANGUL SYLLABLE GWA}) missing from font(s) DejaVu Sans.\n",
      "  func(*args, **kwargs)\n",
      "C:\\Users\\Choi Hyeji\\anaconda3\\lib\\site-packages\\IPython\\core\\events.py:89: UserWarning: Glyph 44552 (\\N{HANGUL SYLLABLE GEUM}) missing from font(s) DejaVu Sans.\n",
      "  func(*args, **kwargs)\n",
      "C:\\Users\\Choi Hyeji\\anaconda3\\lib\\site-packages\\IPython\\core\\events.py:89: UserWarning: Glyph 50529 (\\N{HANGUL SYLLABLE AEG}) missing from font(s) DejaVu Sans.\n",
      "  func(*args, **kwargs)\n",
      "C:\\Users\\Choi Hyeji\\anaconda3\\lib\\site-packages\\IPython\\core\\events.py:89: UserWarning: Glyph 52628 (\\N{HANGUL SYLLABLE CU}) missing from font(s) DejaVu Sans.\n",
      "  func(*args, **kwargs)\n",
      "C:\\Users\\Choi Hyeji\\anaconda3\\lib\\site-packages\\IPython\\core\\events.py:89: UserWarning: Glyph 52380 (\\N{HANGUL SYLLABLE CEON}) missing from font(s) DejaVu Sans.\n",
      "  func(*args, **kwargs)\n",
      "C:\\Users\\Choi Hyeji\\anaconda3\\lib\\site-packages\\IPython\\core\\events.py:89: UserWarning: Glyph 54943 (\\N{HANGUL SYLLABLE HOES}) missing from font(s) DejaVu Sans.\n",
      "  func(*args, **kwargs)\n",
      "C:\\Users\\Choi Hyeji\\anaconda3\\lib\\site-packages\\IPython\\core\\events.py:89: UserWarning: Glyph 45936 (\\N{HANGUL SYLLABLE DE}) missing from font(s) DejaVu Sans.\n",
      "  func(*args, **kwargs)\n",
      "C:\\Users\\Choi Hyeji\\anaconda3\\lib\\site-packages\\IPython\\core\\events.py:89: UserWarning: Glyph 53552 (\\N{HANGUL SYLLABLE TEO}) missing from font(s) DejaVu Sans.\n",
      "  func(*args, **kwargs)\n",
      "C:\\Users\\Choi Hyeji\\anaconda3\\lib\\site-packages\\IPython\\core\\events.py:89: UserWarning: Glyph 49324 (\\N{HANGUL SYLLABLE SA}) missing from font(s) DejaVu Sans.\n",
      "  func(*args, **kwargs)\n",
      "C:\\Users\\Choi Hyeji\\anaconda3\\lib\\site-packages\\IPython\\core\\events.py:89: UserWarning: Glyph 50857 (\\N{HANGUL SYLLABLE YONG}) missing from font(s) DejaVu Sans.\n",
      "  func(*args, **kwargs)\n",
      "C:\\Users\\Choi Hyeji\\anaconda3\\lib\\site-packages\\IPython\\core\\events.py:89: UserWarning: Glyph 47049 (\\N{HANGUL SYLLABLE RYANG}) missing from font(s) DejaVu Sans.\n",
      "  func(*args, **kwargs)\n",
      "C:\\Users\\Choi Hyeji\\anaconda3\\lib\\site-packages\\IPython\\core\\events.py:89: UserWarning: Glyph 48512 (\\N{HANGUL SYLLABLE BU}) missing from font(s) DejaVu Sans.\n",
      "  func(*args, **kwargs)\n",
      "C:\\Users\\Choi Hyeji\\anaconda3\\lib\\site-packages\\IPython\\core\\events.py:89: UserWarning: Glyph 50577 (\\N{HANGUL SYLLABLE YANG}) missing from font(s) DejaVu Sans.\n",
      "  func(*args, **kwargs)\n",
      "C:\\Users\\Choi Hyeji\\anaconda3\\lib\\site-packages\\IPython\\core\\events.py:89: UserWarning: Glyph 51088 (\\N{HANGUL SYLLABLE JA}) missing from font(s) DejaVu Sans.\n",
      "  func(*args, **kwargs)\n",
      "C:\\Users\\Choi Hyeji\\anaconda3\\lib\\site-packages\\IPython\\core\\events.py:89: UserWarning: Glyph 50976 (\\N{HANGUL SYLLABLE YU}) missing from font(s) DejaVu Sans.\n",
      "  func(*args, **kwargs)\n",
      "C:\\Users\\Choi Hyeji\\anaconda3\\lib\\site-packages\\IPython\\core\\events.py:89: UserWarning: Glyph 47924 (\\N{HANGUL SYLLABLE MU}) missing from font(s) DejaVu Sans.\n",
      "  func(*args, **kwargs)\n",
      "C:\\Users\\Choi Hyeji\\anaconda3\\lib\\site-packages\\IPython\\core\\events.py:89: UserWarning: Glyph 50672 (\\N{HANGUL SYLLABLE YEON}) missing from font(s) DejaVu Sans.\n",
      "  func(*args, **kwargs)\n",
      "C:\\Users\\Choi Hyeji\\anaconda3\\lib\\site-packages\\IPython\\core\\events.py:89: UserWarning: Glyph 47161 (\\N{HANGUL SYLLABLE RYEONG}) missing from font(s) DejaVu Sans.\n",
      "  func(*args, **kwargs)\n",
      "C:\\Users\\Choi Hyeji\\anaconda3\\lib\\site-packages\\IPython\\core\\events.py:89: UserWarning: Glyph 50689 (\\N{HANGUL SYLLABLE YEONG}) missing from font(s) DejaVu Sans.\n",
      "  func(*args, **kwargs)\n",
      "C:\\Users\\Choi Hyeji\\anaconda3\\lib\\site-packages\\IPython\\core\\events.py:89: UserWarning: Glyph 51613 (\\N{HANGUL SYLLABLE JEUNG}) missing from font(s) DejaVu Sans.\n",
      "  func(*args, **kwargs)\n",
      "C:\\Users\\Choi Hyeji\\anaconda3\\lib\\site-packages\\IPython\\core\\events.py:89: UserWarning: Glyph 48156 (\\N{HANGUL SYLLABLE BAL}) missing from font(s) DejaVu Sans.\n",
      "  func(*args, **kwargs)\n",
      "C:\\Users\\Choi Hyeji\\anaconda3\\lib\\site-packages\\IPython\\core\\events.py:89: UserWarning: Glyph 44553 (\\N{HANGUL SYLLABLE GEUB}) missing from font(s) DejaVu Sans.\n",
      "  func(*args, **kwargs)\n",
      "C:\\Users\\Choi Hyeji\\anaconda3\\lib\\site-packages\\IPython\\core\\events.py:89: UserWarning: Glyph 50668 (\\N{HANGUL SYLLABLE YEO}) missing from font(s) DejaVu Sans.\n",
      "  func(*args, **kwargs)\n",
      "C:\\Users\\Choi Hyeji\\anaconda3\\lib\\site-packages\\IPython\\core\\events.py:89: UserWarning: Glyph 48169 (\\N{HANGUL SYLLABLE BANG}) missing from font(s) DejaVu Sans.\n",
      "  func(*args, **kwargs)\n",
      "C:\\Users\\Choi Hyeji\\anaconda3\\lib\\site-packages\\IPython\\core\\events.py:89: UserWarning: Glyph 49885 (\\N{HANGUL SYLLABLE SIG}) missing from font(s) DejaVu Sans.\n",
      "  func(*args, **kwargs)\n",
      "C:\\Users\\Choi Hyeji\\anaconda3\\lib\\site-packages\\IPython\\core\\events.py:89: UserWarning: Glyph 44592 (\\N{HANGUL SYLLABLE GI}) missing from font(s) DejaVu Sans.\n",
      "  func(*args, **kwargs)\n",
      "C:\\Users\\Choi Hyeji\\anaconda3\\lib\\site-packages\\IPython\\core\\events.py:89: UserWarning: Glyph 49696 (\\N{HANGUL SYLLABLE SUL}) missing from font(s) DejaVu Sans.\n",
      "  func(*args, **kwargs)\n",
      "C:\\Users\\Choi Hyeji\\anaconda3\\lib\\site-packages\\IPython\\core\\events.py:89: UserWarning: Glyph 51648 (\\N{HANGUL SYLLABLE JI}) missing from font(s) DejaVu Sans.\n",
      "  func(*args, **kwargs)\n",
      "C:\\Users\\Choi Hyeji\\anaconda3\\lib\\site-packages\\IPython\\core\\events.py:89: UserWarning: Glyph 50896 (\\N{HANGUL SYLLABLE WEON}) missing from font(s) DejaVu Sans.\n",
      "  func(*args, **kwargs)\n",
      "C:\\Users\\Choi Hyeji\\anaconda3\\lib\\site-packages\\IPython\\core\\events.py:89: UserWarning: Glyph 49436 (\\N{HANGUL SYLLABLE SEO}) missing from font(s) DejaVu Sans.\n",
      "  func(*args, **kwargs)\n",
      "C:\\Users\\Choi Hyeji\\anaconda3\\lib\\site-packages\\IPython\\core\\events.py:89: UserWarning: Glyph 48708 (\\N{HANGUL SYLLABLE BI}) missing from font(s) DejaVu Sans.\n",
      "  func(*args, **kwargs)\n",
      "C:\\Users\\Choi Hyeji\\anaconda3\\lib\\site-packages\\IPython\\core\\events.py:89: UserWarning: Glyph 49828 (\\N{HANGUL SYLLABLE SEU}) missing from font(s) DejaVu Sans.\n",
      "  func(*args, **kwargs)\n",
      "C:\\Users\\Choi Hyeji\\anaconda3\\lib\\site-packages\\IPython\\core\\events.py:89: UserWarning: Glyph 48372 (\\N{HANGUL SYLLABLE BO}) missing from font(s) DejaVu Sans.\n",
      "  func(*args, **kwargs)\n",
      "C:\\Users\\Choi Hyeji\\anaconda3\\lib\\site-packages\\IPython\\core\\events.py:89: UserWarning: Glyph 50504 (\\N{HANGUL SYLLABLE AN}) missing from font(s) DejaVu Sans.\n",
      "  func(*args, **kwargs)\n",
      "C:\\Users\\Choi Hyeji\\anaconda3\\lib\\site-packages\\IPython\\core\\events.py:89: UserWarning: Glyph 47196 (\\N{HANGUL SYLLABLE RO}) missing from font(s) DejaVu Sans.\n",
      "  func(*args, **kwargs)\n",
      "C:\\Users\\Choi Hyeji\\anaconda3\\lib\\site-packages\\IPython\\core\\events.py:89: UserWarning: Glyph 48141 (\\N{HANGUL SYLLABLE MING}) missing from font(s) DejaVu Sans.\n",
      "  func(*args, **kwargs)\n",
      "C:\\Users\\Choi Hyeji\\anaconda3\\lib\\site-packages\\IPython\\core\\events.py:89: UserWarning: Glyph 47308 (\\N{HANGUL SYLLABLE RYO}) missing from font(s) DejaVu Sans.\n",
      "  func(*args, **kwargs)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Choi Hyeji\\anaconda3\\lib\\site-packages\\IPython\\core\\pylabtools.py:151: UserWarning: Glyph 51060 (\\N{HANGUL SYLLABLE I}) missing from font(s) DejaVu Sans.\n",
      "  fig.canvas.print_figure(bytes_io, **kw)\n",
      "C:\\Users\\Choi Hyeji\\anaconda3\\lib\\site-packages\\IPython\\core\\pylabtools.py:151: UserWarning: Glyph 53448 (\\N{HANGUL SYLLABLE TAL}) missing from font(s) DejaVu Sans.\n",
      "  fig.canvas.print_figure(bytes_io, **kw)\n",
      "C:\\Users\\Choi Hyeji\\anaconda3\\lib\\site-packages\\IPython\\core\\pylabtools.py:151: UserWarning: Glyph 44032 (\\N{HANGUL SYLLABLE GA}) missing from font(s) DejaVu Sans.\n",
      "  fig.canvas.print_figure(bytes_io, **kw)\n",
      "C:\\Users\\Choi Hyeji\\anaconda3\\lib\\site-packages\\IPython\\core\\pylabtools.py:151: UserWarning: Glyph 45733 (\\N{HANGUL SYLLABLE NEUNG}) missing from font(s) DejaVu Sans.\n",
      "  fig.canvas.print_figure(bytes_io, **kw)\n",
      "C:\\Users\\Choi Hyeji\\anaconda3\\lib\\site-packages\\IPython\\core\\pylabtools.py:151: UserWarning: Glyph 51216 (\\N{HANGUL SYLLABLE JEOM}) missing from font(s) DejaVu Sans.\n",
      "  fig.canvas.print_figure(bytes_io, **kw)\n",
      "C:\\Users\\Choi Hyeji\\anaconda3\\lib\\site-packages\\IPython\\core\\pylabtools.py:151: UserWarning: Glyph 49688 (\\N{HANGUL SYLLABLE SU}) missing from font(s) DejaVu Sans.\n",
      "  fig.canvas.print_figure(bytes_io, **kw)\n",
      "C:\\Users\\Choi Hyeji\\anaconda3\\lib\\site-packages\\IPython\\core\\pylabtools.py:151: UserWarning: Glyph 52509 (\\N{HANGUL SYLLABLE CONG}) missing from font(s) DejaVu Sans.\n",
      "  fig.canvas.print_figure(bytes_io, **kw)\n",
      "C:\\Users\\Choi Hyeji\\anaconda3\\lib\\site-packages\\IPython\\core\\pylabtools.py:151: UserWarning: Glyph 44284 (\\N{HANGUL SYLLABLE GWA}) missing from font(s) DejaVu Sans.\n",
      "  fig.canvas.print_figure(bytes_io, **kw)\n",
      "C:\\Users\\Choi Hyeji\\anaconda3\\lib\\site-packages\\IPython\\core\\pylabtools.py:151: UserWarning: Glyph 44552 (\\N{HANGUL SYLLABLE GEUM}) missing from font(s) DejaVu Sans.\n",
      "  fig.canvas.print_figure(bytes_io, **kw)\n",
      "C:\\Users\\Choi Hyeji\\anaconda3\\lib\\site-packages\\IPython\\core\\pylabtools.py:151: UserWarning: Glyph 50529 (\\N{HANGUL SYLLABLE AEG}) missing from font(s) DejaVu Sans.\n",
      "  fig.canvas.print_figure(bytes_io, **kw)\n",
      "C:\\Users\\Choi Hyeji\\anaconda3\\lib\\site-packages\\IPython\\core\\pylabtools.py:151: UserWarning: Glyph 52628 (\\N{HANGUL SYLLABLE CU}) missing from font(s) DejaVu Sans.\n",
      "  fig.canvas.print_figure(bytes_io, **kw)\n",
      "C:\\Users\\Choi Hyeji\\anaconda3\\lib\\site-packages\\IPython\\core\\pylabtools.py:151: UserWarning: Glyph 52380 (\\N{HANGUL SYLLABLE CEON}) missing from font(s) DejaVu Sans.\n",
      "  fig.canvas.print_figure(bytes_io, **kw)\n",
      "C:\\Users\\Choi Hyeji\\anaconda3\\lib\\site-packages\\IPython\\core\\pylabtools.py:151: UserWarning: Glyph 54943 (\\N{HANGUL SYLLABLE HOES}) missing from font(s) DejaVu Sans.\n",
      "  fig.canvas.print_figure(bytes_io, **kw)\n",
      "C:\\Users\\Choi Hyeji\\anaconda3\\lib\\site-packages\\IPython\\core\\pylabtools.py:151: UserWarning: Glyph 45936 (\\N{HANGUL SYLLABLE DE}) missing from font(s) DejaVu Sans.\n",
      "  fig.canvas.print_figure(bytes_io, **kw)\n",
      "C:\\Users\\Choi Hyeji\\anaconda3\\lib\\site-packages\\IPython\\core\\pylabtools.py:151: UserWarning: Glyph 53552 (\\N{HANGUL SYLLABLE TEO}) missing from font(s) DejaVu Sans.\n",
      "  fig.canvas.print_figure(bytes_io, **kw)\n",
      "C:\\Users\\Choi Hyeji\\anaconda3\\lib\\site-packages\\IPython\\core\\pylabtools.py:151: UserWarning: Glyph 49324 (\\N{HANGUL SYLLABLE SA}) missing from font(s) DejaVu Sans.\n",
      "  fig.canvas.print_figure(bytes_io, **kw)\n",
      "C:\\Users\\Choi Hyeji\\anaconda3\\lib\\site-packages\\IPython\\core\\pylabtools.py:151: UserWarning: Glyph 50857 (\\N{HANGUL SYLLABLE YONG}) missing from font(s) DejaVu Sans.\n",
      "  fig.canvas.print_figure(bytes_io, **kw)\n",
      "C:\\Users\\Choi Hyeji\\anaconda3\\lib\\site-packages\\IPython\\core\\pylabtools.py:151: UserWarning: Glyph 47049 (\\N{HANGUL SYLLABLE RYANG}) missing from font(s) DejaVu Sans.\n",
      "  fig.canvas.print_figure(bytes_io, **kw)\n",
      "C:\\Users\\Choi Hyeji\\anaconda3\\lib\\site-packages\\IPython\\core\\pylabtools.py:151: UserWarning: Glyph 48512 (\\N{HANGUL SYLLABLE BU}) missing from font(s) DejaVu Sans.\n",
      "  fig.canvas.print_figure(bytes_io, **kw)\n",
      "C:\\Users\\Choi Hyeji\\anaconda3\\lib\\site-packages\\IPython\\core\\pylabtools.py:151: UserWarning: Glyph 50577 (\\N{HANGUL SYLLABLE YANG}) missing from font(s) DejaVu Sans.\n",
      "  fig.canvas.print_figure(bytes_io, **kw)\n",
      "C:\\Users\\Choi Hyeji\\anaconda3\\lib\\site-packages\\IPython\\core\\pylabtools.py:151: UserWarning: Glyph 51088 (\\N{HANGUL SYLLABLE JA}) missing from font(s) DejaVu Sans.\n",
      "  fig.canvas.print_figure(bytes_io, **kw)\n",
      "C:\\Users\\Choi Hyeji\\anaconda3\\lib\\site-packages\\IPython\\core\\pylabtools.py:151: UserWarning: Glyph 50976 (\\N{HANGUL SYLLABLE YU}) missing from font(s) DejaVu Sans.\n",
      "  fig.canvas.print_figure(bytes_io, **kw)\n",
      "C:\\Users\\Choi Hyeji\\anaconda3\\lib\\site-packages\\IPython\\core\\pylabtools.py:151: UserWarning: Glyph 47924 (\\N{HANGUL SYLLABLE MU}) missing from font(s) DejaVu Sans.\n",
      "  fig.canvas.print_figure(bytes_io, **kw)\n",
      "C:\\Users\\Choi Hyeji\\anaconda3\\lib\\site-packages\\IPython\\core\\pylabtools.py:151: UserWarning: Glyph 50672 (\\N{HANGUL SYLLABLE YEON}) missing from font(s) DejaVu Sans.\n",
      "  fig.canvas.print_figure(bytes_io, **kw)\n",
      "C:\\Users\\Choi Hyeji\\anaconda3\\lib\\site-packages\\IPython\\core\\pylabtools.py:151: UserWarning: Glyph 47161 (\\N{HANGUL SYLLABLE RYEONG}) missing from font(s) DejaVu Sans.\n",
      "  fig.canvas.print_figure(bytes_io, **kw)\n",
      "C:\\Users\\Choi Hyeji\\anaconda3\\lib\\site-packages\\IPython\\core\\pylabtools.py:151: UserWarning: Glyph 50689 (\\N{HANGUL SYLLABLE YEONG}) missing from font(s) DejaVu Sans.\n",
      "  fig.canvas.print_figure(bytes_io, **kw)\n",
      "C:\\Users\\Choi Hyeji\\anaconda3\\lib\\site-packages\\IPython\\core\\pylabtools.py:151: UserWarning: Glyph 51613 (\\N{HANGUL SYLLABLE JEUNG}) missing from font(s) DejaVu Sans.\n",
      "  fig.canvas.print_figure(bytes_io, **kw)\n",
      "C:\\Users\\Choi Hyeji\\anaconda3\\lib\\site-packages\\IPython\\core\\pylabtools.py:151: UserWarning: Glyph 48156 (\\N{HANGUL SYLLABLE BAL}) missing from font(s) DejaVu Sans.\n",
      "  fig.canvas.print_figure(bytes_io, **kw)\n",
      "C:\\Users\\Choi Hyeji\\anaconda3\\lib\\site-packages\\IPython\\core\\pylabtools.py:151: UserWarning: Glyph 44553 (\\N{HANGUL SYLLABLE GEUB}) missing from font(s) DejaVu Sans.\n",
      "  fig.canvas.print_figure(bytes_io, **kw)\n",
      "C:\\Users\\Choi Hyeji\\anaconda3\\lib\\site-packages\\IPython\\core\\pylabtools.py:151: UserWarning: Glyph 50668 (\\N{HANGUL SYLLABLE YEO}) missing from font(s) DejaVu Sans.\n",
      "  fig.canvas.print_figure(bytes_io, **kw)\n",
      "C:\\Users\\Choi Hyeji\\anaconda3\\lib\\site-packages\\IPython\\core\\pylabtools.py:151: UserWarning: Glyph 48169 (\\N{HANGUL SYLLABLE BANG}) missing from font(s) DejaVu Sans.\n",
      "  fig.canvas.print_figure(bytes_io, **kw)\n",
      "C:\\Users\\Choi Hyeji\\anaconda3\\lib\\site-packages\\IPython\\core\\pylabtools.py:151: UserWarning: Glyph 49885 (\\N{HANGUL SYLLABLE SIG}) missing from font(s) DejaVu Sans.\n",
      "  fig.canvas.print_figure(bytes_io, **kw)\n",
      "C:\\Users\\Choi Hyeji\\anaconda3\\lib\\site-packages\\IPython\\core\\pylabtools.py:151: UserWarning: Glyph 44592 (\\N{HANGUL SYLLABLE GI}) missing from font(s) DejaVu Sans.\n",
      "  fig.canvas.print_figure(bytes_io, **kw)\n",
      "C:\\Users\\Choi Hyeji\\anaconda3\\lib\\site-packages\\IPython\\core\\pylabtools.py:151: UserWarning: Glyph 49696 (\\N{HANGUL SYLLABLE SUL}) missing from font(s) DejaVu Sans.\n",
      "  fig.canvas.print_figure(bytes_io, **kw)\n",
      "C:\\Users\\Choi Hyeji\\anaconda3\\lib\\site-packages\\IPython\\core\\pylabtools.py:151: UserWarning: Glyph 51648 (\\N{HANGUL SYLLABLE JI}) missing from font(s) DejaVu Sans.\n",
      "  fig.canvas.print_figure(bytes_io, **kw)\n",
      "C:\\Users\\Choi Hyeji\\anaconda3\\lib\\site-packages\\IPython\\core\\pylabtools.py:151: UserWarning: Glyph 50896 (\\N{HANGUL SYLLABLE WEON}) missing from font(s) DejaVu Sans.\n",
      "  fig.canvas.print_figure(bytes_io, **kw)\n",
      "C:\\Users\\Choi Hyeji\\anaconda3\\lib\\site-packages\\IPython\\core\\pylabtools.py:151: UserWarning: Glyph 49436 (\\N{HANGUL SYLLABLE SEO}) missing from font(s) DejaVu Sans.\n",
      "  fig.canvas.print_figure(bytes_io, **kw)\n",
      "C:\\Users\\Choi Hyeji\\anaconda3\\lib\\site-packages\\IPython\\core\\pylabtools.py:151: UserWarning: Glyph 48708 (\\N{HANGUL SYLLABLE BI}) missing from font(s) DejaVu Sans.\n",
      "  fig.canvas.print_figure(bytes_io, **kw)\n",
      "C:\\Users\\Choi Hyeji\\anaconda3\\lib\\site-packages\\IPython\\core\\pylabtools.py:151: UserWarning: Glyph 49828 (\\N{HANGUL SYLLABLE SEU}) missing from font(s) DejaVu Sans.\n",
      "  fig.canvas.print_figure(bytes_io, **kw)\n",
      "C:\\Users\\Choi Hyeji\\anaconda3\\lib\\site-packages\\IPython\\core\\pylabtools.py:151: UserWarning: Glyph 48372 (\\N{HANGUL SYLLABLE BO}) missing from font(s) DejaVu Sans.\n",
      "  fig.canvas.print_figure(bytes_io, **kw)\n",
      "C:\\Users\\Choi Hyeji\\anaconda3\\lib\\site-packages\\IPython\\core\\pylabtools.py:151: UserWarning: Glyph 50504 (\\N{HANGUL SYLLABLE AN}) missing from font(s) DejaVu Sans.\n",
      "  fig.canvas.print_figure(bytes_io, **kw)\n",
      "C:\\Users\\Choi Hyeji\\anaconda3\\lib\\site-packages\\IPython\\core\\pylabtools.py:151: UserWarning: Glyph 47196 (\\N{HANGUL SYLLABLE RO}) missing from font(s) DejaVu Sans.\n",
      "  fig.canvas.print_figure(bytes_io, **kw)\n",
      "C:\\Users\\Choi Hyeji\\anaconda3\\lib\\site-packages\\IPython\\core\\pylabtools.py:151: UserWarning: Glyph 48141 (\\N{HANGUL SYLLABLE MING}) missing from font(s) DejaVu Sans.\n",
      "  fig.canvas.print_figure(bytes_io, **kw)\n",
      "C:\\Users\\Choi Hyeji\\anaconda3\\lib\\site-packages\\IPython\\core\\pylabtools.py:151: UserWarning: Glyph 47308 (\\N{HANGUL SYLLABLE RYO}) missing from font(s) DejaVu Sans.\n",
      "  fig.canvas.print_figure(bytes_io, **kw)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA94AAAJOCAYAAABBfN/cAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjkuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8hTgPZAAAACXBIWXMAAA9hAAAPYQGoP6dpAACZp0lEQVR4nOzdeVyU5f7/8ffMsO+KgMqigPtubmmalWueLM2TppVLZqun+tnJ8lvHrHM61ik9ttumlmbaYp5W19JKzV2z3EVFUVBBQEBgmJnfHzeMIKig4LC8no/H/WDue+6557pnbmDec1335zY5HA6HAAAAAABAhTC7ugEAAAAAAFRnBG8AAAAAACoQwRsAAAAAgApE8AYAAAAAoAIRvAEAAAAAqEAEbwAAAAAAKhDBGwAAAACACkTwBgAAAACgAhG8AQAAAACoQARvAACqsYYNG2r06NGubgYAADUawRsAgEuYM2eOTCaTNm3a5OqmVDnZ2dn673//qy5duigwMFBeXl5q0qSJxo8fr71797q6eQAAXBVurm4AAACoOHv27JHZ7Jrv2U+dOqX+/ftr8+bNuuWWWzRixAj5+flpz549WrBggd577z3l5ua6pG0AAFxNBG8AAKqIvLw82e12eXh4lPoxnp6eFdiiixs9erS2bt2qL774QkOGDCly3z//+U8988wz5fI8l/O6AABwNTHUHACAcpKQkKB7771XYWFh8vT0VMuWLTVr1qwi6+Tm5mry5Mnq0KGDAgMD5evrqx49euinn34qst6hQ4dkMpn06quvasaMGYqNjZWnp6d27typKVOmyGQyaf/+/Ro9erSCgoIUGBioMWPGKCsrq8h2zj/Hu2DY/Jo1azRhwgSFhITI19dXgwcP1smTJ4s81m63a8qUKapfv758fHx04403aufOnaU6b3z9+vX67rvvNHbs2GKhWzK+EHj11Ved8zfccINuuOGGYuuNHj1aDRs2vOTrsnXrVrm5uen5558vto09e/bIZDLpzTffdC5LTU3V448/rsjISHl6eqpRo0Z6+eWXZbfbizx2wYIF6tChg/z9/RUQEKDWrVvrtddeu+i+AwBwPnq8AQAoB0lJSbr22mtlMpk0fvx4hYSE6IcfftDYsWOVnp6uxx9/XJKUnp6uDz74QMOHD9e4ceN05swZffjhh+rXr582bNigdu3aFdnu7NmzlZ2drfvvv1+enp6qXbu2876hQ4cqOjpaU6dO1ZYtW/TBBx8oNDRUL7/88iXb+7e//U21atXSc889p0OHDmnGjBkaP368Fi5c6Fxn0qRJ+s9//qOBAweqX79+2r59u/r166fs7OxLbv/rr7+WJN1zzz2lePXK7vzXpV69eurZs6c+++wzPffcc0XWXbhwoSwWi+644w5JUlZWlnr27KmEhAQ98MADioqK0tq1azVp0iQdP35cM2bMkCQtX75cw4cPV69evZyv6a5du7RmzRo99thjFbJfAIDqieANAEA5eOaZZ2Sz2bRjxw4FBwdLkh588EENHz5cU6ZM0QMPPCBvb2/VqlVLhw4dKjIsety4cWrWrJneeOMNffjhh0W2e/ToUe3fv18hISHFnrN9+/ZF1k9OTtaHH35YquAdHBysZcuWyWQySTJ6t19//XWlpaUpMDBQSUlJmj59ugYNGqSvvvrK+bjnn39eU6ZMueT2d+3aJUlq3br1Jde9HCW9LsOGDdMDDzygP/74Q61atXIuX7hwoXr27KmwsDBJ0vTp03XgwAFt3bpVjRs3liQ98MADql+/vl555RU98cQTioyM1HfffaeAgAAtXbpUFoulQvYDAFAzMNQcAIAr5HA49OWXX2rgwIFyOBw6deqUc+rXr5/S0tK0ZcsWSZLFYnGGbrvdrpSUFOXl5aljx47OdQobMmRIiaFbMoJ9YT169FBycrLS09Mv2eb777/fGboLHmuz2XT48GFJ0sqVK5WXl6eHH364yOP+9re/XXLbkpxt8Pf3L9X6ZVXS63L77bfLzc2tSK/9H3/8oZ07d2rYsGHOZZ9//rl69OihWrVqFXmvevfuLZvNpp9//lmSFBQUpMzMTC1fvrxC9gEAUHMQvAEAuEInT55Uamqq3nvvPYWEhBSZxowZI0k6ceKEc/2PPvpIbdq0kZeXl4KDgxUSEqLvvvtOaWlpxbYdHR19weeNiooqMl+rVi1J0unTpy/Z5ks9tiCAN2rUqMh6tWvXdq57MQEBAZKkM2fOXHLdy1HS61KnTh316tVLn332mXPZwoUL5ebmpttvv925bN++fVqyZEmx96p3796Szr1XDz/8sJo0aaKbb75ZERERuvfee7VkyZIK2R8AQPXGUHMAAK5QQUGuu+++W6NGjSpxnTZt2kiS5s2bp9GjR2vQoEF68sknFRoaKovFoqlTp+rAgQPFHuft7X3B573Q8GeHw3HJNl/JY0ujWbNmkqQdO3aoR48el1zfZDKV+Nw2m63E9S/0utx5550aM2aMtm3bpnbt2umzzz5Tr169VKdOHec6drtdffr00cSJE0vcRpMmTSRJoaGh2rZtm5YuXaoffvhBP/zwg2bPnq2RI0fqo48+uuQ+AQBQgOANAMAVCgkJkb+/v2w2m7PX9EK++OILxcTEaNGiRUWGep9fEMzVGjRoIEnav39/kd7l5OTkUvWoDxw4UFOnTtW8efNKFbxr1aqluLi4YssLet5La9CgQXrggQecw8337t2rSZMmFVknNjZWGRkZl3yvJMnDw0MDBw7UwIEDZbfb9fDDD+vdd9/VP/7xj2KjAQAAuBCGmgMAcIUsFouGDBmiL7/8Un/88Uex+wtfpqugp7lw7+769eu1bt26im9oGfTq1Utubm565513iiwvfEmui+natav69++vDz74QIsXLy52f25urv7+978752NjY7V79+4ir9X27du1Zs2aMrU7KChI/fr102effaYFCxbIw8NDgwYNKrLO0KFDtW7dOi1durTY41NTU5WXlyfJ+JKhMLPZ7By5kJOTU6Z2AQBqNnq8AQAopVmzZpV4ju9jjz2ml156ST/99JO6dOmicePGqUWLFkpJSdGWLVu0YsUKpaSkSJJuueUWLVq0SIMHD9Zf/vIXHTx4UDNnzlSLFi2UkZFxtXfpgsLCwvTYY49p2rRpuvXWW9W/f39t375dP/zwg+rUqVOkt/5CPv74Y/Xt21e33367Bg4cqF69esnX11f79u3TggULdPz4cee1vO+9915Nnz5d/fr109ixY3XixAnNnDlTLVu2LFWxuMKGDRumu+++W2+//bb69eunoKCgIvc/+eST+vrrr3XLLbdo9OjR6tChgzIzM7Vjxw598cUXOnTokOrUqaP77rtPKSkpuummmxQREaHDhw/rjTfeULt27dS8efMytQkAULMRvAEAKKXze38LjB49WhEREdqwYYNeeOEFLVq0SG+//baCg4PVsmXLIpf3Gj16tBITE/Xuu+9q6dKlatGihebNm6fPP/9cq1atukp7Ujovv/yyfHx89P7772vFihXq2rWrli1bpu7du8vLy+uSjw8JCdHatWv19ttva+HChXrmmWeUm5urBg0a6NZbby1yLezmzZvr448/1uTJkzVhwgS1aNFCc+fO1fz588v8utx6663y9vbWmTNnilQzL+Dj46PVq1fr3//+tz7//HN9/PHHCggIUJMmTfT8888rMDBQknHO/nvvvae3335bqampqlu3roYNG6YpU6bIbGbQIACg9EyO8qqiAgAAqr3U1FTVqlVL//rXv/TMM8+4ujkAAFQJfF0LAABKdPbs2WLLZsyYIUm64YYbrm5jAACowhhqDgAASrRw4ULNmTNHAwYMkJ+fn3799Vd9+umn6tu3r6677jpXNw8AgCqD4A0AAErUpk0bubm56T//+Y/S09OdBdf+9a9/ubppAABUKZzjDQAAAABABeIcbwAAAAAAKhDBGwAAAACACsQ53iWw2+06duyY/P39ZTKZXN0cAAAAAEAl43A4dObMGdWvX19m88X7tAneJTh27JgiIyNd3QwAAAAAQCV35MgRRUREXHQdgncJ/P39JRkvYEBAgItbg/JgtVq1bNky9e3bV+7u7q5uDuDEsYnKjOMTlRXHJiozjs+aIz09XZGRkc78eDEE7xIUDC8PCAggeFcTVqtVPj4+CggI4A8gKhWOTVRmHJ+orDg2UZlxfNY8pTk9meJqAAAAAABUIII3AAAAAAAViOANAAAAAEAF4hxvAAAAoAaz2WyyWq2ubka1YbVa5ebmpuzsbNlsNlc3B1fA3d1dFoulXLZF8AYAAABqIIfDocTERKWmprq6KdWKw+FQ3bp1deTIkVIV3ULlFhQUpLp1617xe0nwBgAAAGqggtAdGhoqHx8fQmI5sdvtysjIkJ+fn8xmzuytqhwOh7KysnTixAlJUr169a5oewRvAAAAoIax2WzO0B0cHOzq5lQrdrtdubm58vLyInhXcd7e3pKkEydOKDQ09IqGnXMkAAAAADVMwTndPj4+Lm4JULkV/I5caR0EgjcAAABQQzG8HLi48vodIXgDAAAAAFCBCN4AAAAAarSGDRtqxowZpV5/1apVMplMVIRHqRG8AQAAAFQJJpPpotOUKVMua7sbN27U/fffX+r1u3XrpuPHjyswMPCyng81D1XNAQAAAFQJx48fd95euHChJk+erD179jiX+fn5OW87HA7ZbDa5uV068oSEhJSpHR4eHqpbt26ZHlMVWK1Wubu7u7oZ1RI93gAAAACqhLp16zqnwMBAmUwm5/zu3bvl7++vH374QR06dJCnp6d+/fVXHThwQLfddpvCwsLk5+enTp06acWKFUW2e/5Qc5PJpA8++ECDBw+Wj4+PGjdurK+//tp5//lDzefMmaOgoCAtXbpULVu2VEREhG6++eYiXxTk5eXp0UcfVVBQkIKDg/XUU09p1KhRGjRo0AX39/Dhwxo4cKBq1aolX19ftWzZUt9//73z/j///FO33HKLAgIC5O/vrx49eujAgQOSjMuavfDCC4qIiJCnp6fatWunJUuWOB976NAhmUwmLVy4UD179pSXl5c++eQTSdIHH3yg5s2by8vLS82aNdPbb79d5vcKRRG8AQAAAMjhcCgrN88lk8PhKLf9ePrpp/XSSy9p165datOmjTIyMjRgwACtXLlSW7duVf/+/TVw4EDFx8dfdDvPP/+8hg4dqt9//10DBgzQXXfdpZSUlAuun5WVpVdffVUfffSRvvvuOx05ckR///vfnfe//PLL+uSTTzR79mytWbNG6enpWrx48UXb8MgjjygnJ0c///yzduzYoZdfftnZq5+QkKDrr79enp6e+vHHH7V582bde++9ysvLkyS99tprmjZtml599VX9/vvv6tevn2699Vbt27ev2Ov12GOPadeuXerXr58++eQTTZ48WS+++KJ27dqlf//73/rHP/6hjz766KJtxcUx1BwAAACAzlptajF5qUuee+cL/eTjUT7R5IUXXlCfPn2c87Vr11bbtm2d8//85z/11Vdf6euvv9b48eMvuJ3Ro0dr+PDhkqR///vfev3117Vhwwb179+/xPWtVqtmzpyp6Ohopaen65FHHtE///lP5/1vvPGGJk2apMGDB0uS3nzzzSK91yWJj4/XkCFD1Lp1a0lSTEyM87633npLgYGBWrBggXN4eJMmTZz3v/rqq3rqqad05513SjKC/08//aQZM2borbfecq73+OOP6/bbb3fOP/fcc5o2bZpzWXR0tHbu3Kl3331Xo0aNumh7cWEEbwAAAADVRseOHYvMZ2RkaMqUKfruu+90/Phx5eXl6ezZs5fs8W7Tpo3ztq+vrwICAnTixIkLru/j46PY2FjZ7XZJxrD4gvXT0tKUlJSkzp07O9e3WCzq0KGDc/2SPProo3rooYe0bNky9e7dW0OGDHG2a9u2berRo0eJ52Snp6fr2LFjuu6664osv+6667R9+/Yiywq/XpmZmTpw4IDGjh2rcePGOZfn5eVRSO4KEbwBAAAAyNvdop0v9HPZc5cXX1/fIvN///vftXz5cr366qtq1KiRvL299de//lW5ubkX3c75gdZkMl00JJe0/pUOob/vvvvUr18/fffdd1q2bJmmTp2qadOm6W9/+5u8vb2vaNsFCr9eGRkZkqT3339fXbp0KbKexVJ+71FNxDneAAAAAGQymeTj4eaSyWQyVdh+rVmzRqNHj9bgwYPVunVr1a1bV4cOHaqw5ytJYGCgwsLCtHHjRucym82mLVu2XPKxkZGRevDBB7Vo0SI98cQTev/99yUZPfK//PKLrFZrsccEBASofv36WrNmTZHla9asUYsWLS74XGFhYapfv77i4uLUqFGjIlN0dHRpdxcloMcbwFVlszuUdtaqlMwcJWfk6nRWrpIzc3U6s+hPm92h9lFB6hpTRx0a1JK3B9+yAgCAsmvcuLEWLVqkgQMHymQy6R//+MdFe64ryt/+9jdNnTpVjRo1UrNmzfTGG2/o9OnTF/3S4fHHH9fNN9+sJk2a6PTp0/rpp5/UvHlzSdL48eP1xhtv6M4779SkSZMUGBio3377TZ07d1bTpk315JNP6rnnnlNsbKzatWun2bNna9u2bc7K5Rfy/PPP69FHH1VgYKD69++vnJwcbdq0SadPn9aECRPK9TWpSQjeAK7I2VybUrJylZKRa/zMzFFKprXIz9OZViVn5uh0llWns3JV2lFXaw8k662fDsjDYla7qCB1jQlW19hgtY8KkqcbQRwAAFza9OnTde+996pbt26qU6eOnnrqKaWnp1/1djz11FNKTEzUyJEjZbFYdP/996tfv34XHcJts9n0yCOP6OjRowoICFD//v313//+V5IUHBysH3/8UU8++aR69uwpi8Widu3aOc/rfvTRR5WWlqYnnnhCJ06cUIsWLfT111+rcePGF23nfffdJx8fH73yyit68skn5evrq9atW+vxxx8vt9eiJjI5yrN2fzWRnp6uwMBApaWlKSAgwNXNQTmwWq36/vvvNWDAgBILUMBgz++NTs7M74nO75FOybzwdNZqu6znCvR2V21fD9X29VAtHw8F+3qolu+5n3k2u9YfTNG6A8lKTM8u8lhPN7M6NKjlDOJtIoLk4VY1z5zh2ERlxvGJyopj88plZ2fr4MGDio6OlpeXl6ubU63Y7Xalp6crICBA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44L7PmXKlCK90jabTRMmTFBQUJCCg4M1ceLEYr3US5YsUffu3Z3r3HLLLTpw4IDz/ujoaElS+/btZTKZdMMNN0gyhpoPGjTIuV5OTo4effRRhYaGysvLS927d9fGjRud969atUomk0krV65Ux44d5ePjo27dumnPnj0X3J/c3FyNHz9e9erVk5eXlxo0aKCpU6c6709NTdUDDzygsLAweXl5qVWrVvr222+d93/55Zdq2bKlPD091bBhQ02bNq3I9hs2bKh//vOfGjlypAICAnT//fdLkn799Vf16NFD3t7eioyM1KOPPqrMzMwLtrM80OONamn/iTP68NeD+nJLgnLz7JKkWh4OPdSrmYZ3acBQX1w1YQFeuq1duG5rFy5JOpZ61nkN8XUHkpWQelYHz5j0zuqDemf1QXlYzGofFWRUTY8JVruoIHm6cZk6AMBV4HBI1izXPLe7j2S69Ol+KSkpWrJkiV588UX5+voWuz8oKKjI/JQpU/TSSy9pxowZcnNz01dffaXHHntMM2bMUO/evfXtt99qzJgxioiI0I033qgvv/xS//3vf7VgwQK1bNlSiYmJ2r59uyRp06ZNevTRRzV37lx169ZNKSkp+uWXX0psp9ls1p133qn58+froYceci7/5JNPdN1116lBgwbO9V5//XVFR0crLi5ODz/8sCZOnKi33367VC/btGnTNGfOHM2aNUvNmzfXtGnT9NVXX+mmm25yrpOZmakJEyaoTZs2ysjI0OTJkzV48GBt27ZNZrNZGzZsUOfOnbVixQq1bNnygj3CEydO1JdffqmPPvpIDRo00H/+8x/169dP+/fvV+3atZ3rPfPMM5o2bZpCQkL04IMP6t5779WaNWtK3Obrr7+ur7/+Wp999pmioqJ05MgRHTliFK+12+26+eabdebMGc2bN0+xsbHauXOnLBbjc9HmzZs1dOhQTZkyRcOGDdPatWv18MMPKzg4WKNHj3Y+x6uvvqrJkyfrueeekyQdOHBA/fv317/+9S/NmjVLJ0+e1Pjx4zV+/HjNnj27VK/75SB4o9pwOBxaeyBZH/wSp5/2nHQubxsRqDHdGsgev0UDuzWo8kOMULXVD/LWkA4RGtIhQg6HQ3En0vX+/1Yryy9C6w+lKCk9R+sPpmj9wRTN0D55uZvVoUEt59D0NhFBcrcwWAkAUAGsWdK/67vm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LX3//fey2+1q2rTpBZ+vYcOG6tatm8aOHSubzaZbb73VeV+jRo1ktVr1xhtvaODAgVqzZk2RYF4ajz32mF566SU1btxYzZo10/Tp05Wamuq8v1atWgoODtZ7772nevXqKT4+Xk8//XSRbYSGhsrb21tLlixRRESEvLy8il1KzNfXVw899JCefPJJ1a5dW1FRUfrPf/6jrKwsjR07tkxtLmz69OmqV6+e2rdvL7PZrM8//1x169ZVUFCQevbsqeuvv15DhgzR9OnT1ahRI+3evVsmk0n9+/fXE088oU6dOumf//ynhg0bpnXr1unNN9+85PnxTz31lK699lqNHz9e9913n3x9fbVz504tX75cb7755mXvy6UQvFGp5dns+uGPRH3wS5y2H01zLr+xaYjG9YhR19hgQgRqLIvZpNYRgWodEaj7r4+V1WbXjoQ0rTuQrN/ikrXxUIqSM3P13Y7j+m7HcUlSqL+nrs0v1NY1JlgNgn1c8jtUEFyt+YHUarefu22zn7vPXijMFrovL399q81RKNAWDrrGz3MB2Hj8+QG46PLigblIO/LszoCdZy/bOYYliartozvyC+3VDyqf4XQAUBPExMRoy5YtevHFF/XEE0/o+PHjCgkJUYcOHYpdvut8gwYN0muvvaZXX31Vjz32mKKjozV79mznJbSCgoL00ksvacKECbLZbGrdurW++eYbBQcHKygoSIsWLdKUKVOUnZ2txo0b69NPP1XLli0v+px33XWXHn74YY0cObLI8Om2bdtq+vTpevnllzVp0iRdf/31mjp1qkaOHFnq16Jg/0eNGiWz2ax7771XgwcPVlqa8bnZbDZrwYIFevTRR9WqVSs1bdpUr7/+unN/JeO88Ndff10vvPCCJk+erB49emjVqlXFnuull16S3W7XPffcozNnzqhjx45aunSpatWqVer2ns/f31//+c9/tG/fPlksFnXq1Enff/+9cwTAl19+qb///e8aPny4MjMz1ahRI7300kuSjJ7rzz77TJMnT9Y///lP1atXTy+88EKRwmoladOmjVavXq1nnnlGPXr0kMPhUGxsrIYNG3bZ+1EaJkdZKxTUAOnp6QoMDFRaWpoCAgJc3ZwaKT3bqs82HtHsNYeUkHpWkuThZtaQa8I1tnu0GoX6l2l7VqtV33//vQYMGEBVc1QqFXls5ubZtf1oqnH5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\n",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "df_customer = pd.read_csv(r'C:\\Users\\Choi Hyeji\\Desktop\\통신사\\DS_Customer_data_modified2.csv', index_col=0)\n",
    "df_charge = pd.read_csv(r'C:\\Users\\Choi Hyeji\\Desktop\\통신사\\DS_Charge_data.csv', index_col = 0, encoding='cp949')\n",
    "\n",
    "def age_bound(x):\n",
    "    if x < 20:\n",
    "        return '20대 미만'\n",
    "    elif 20 <= x < 30:\n",
    "        return '20대'\n",
    "    elif 30 <= x < 40:\n",
    "        return '30대'\n",
    "    elif 40 <= x < 50:\n",
    "        return '40대'\n",
    "    elif 50 <= x < 60:\n",
    "        return '50대'\n",
    "    elif 60 <= x < 70:\n",
    "        return '60대'\n",
    "    elif 70 <= x < 80:\n",
    "        return '70대'\n",
    "    elif 80 <= x:\n",
    "        return '80대 이상'\n",
    "    \n",
    "df_customer['연령대'] = df_customer['연령'].apply(age_bound)\n",
    "df_customer.drop(columns=['유지기간', '유지기간(년)', '고객월평균납부액', '데이터사용구간'], inplace=True)\n",
    "\n",
    "import numpy as np\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.metrics import classification_report\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "def analyze_customer_data(df_customer, df_charge):\n",
    "    \"\"\"\n",
    "    Comprehensive analysis of customer data including churn prediction and LTV analysis\n",
    "    \n",
    "    Parameters:\n",
    "    df_customer: Customer demographic and service usage data\n",
    "    df_charge: Customer billing data\n",
    "    \"\"\"\n",
    "    # 1. Data Preprocessing\n",
    "    # Calculate customer tenure\n",
    "    df_customer['tenure'] = (pd.to_datetime(df_customer['종료일']) - \n",
    "                           pd.to_datetime(df_customer['시작일'])).dt.days\n",
    "    \n",
    "    # Merge with billing data\n",
    "    df_charge['과금일'] = pd.to_datetime(df_charge['과금일'])\n",
    "    monthly_charges = df_charge.groupby('고객ID')['과금액'].agg(['mean', 'std']).reset_index()\n",
    "    monthly_charges.columns = ['고객ID', 'avg_monthly_charge', 'std_monthly_charge']\n",
    "    \n",
    "    df = pd.merge(df_customer, monthly_charges, on='고객ID', how='left')\n",
    "    \n",
    "    # 2. Churn Analysis\n",
    "    def analyze_churn(df):\n",
    "        # Create feature matrix\n",
    "        features = ['연령', '부양자수', '추천횟수', '데이터사용량', 'tenure',\n",
    "                   'avg_monthly_charge', 'std_monthly_charge', '만족도', 'LTV']\n",
    "        \n",
    "        X = df[features]\n",
    "        y = df['고객이탈여부']\n",
    "        \n",
    "        # Split data\n",
    "        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "        \n",
    "        # Train model\n",
    "        rf_model = RandomForestClassifier(n_estimators=100, random_state=42)\n",
    "        rf_model.fit(X_train, y_train)\n",
    "        \n",
    "        # Get feature importance\n",
    "        feature_importance = pd.DataFrame({\n",
    "            'feature': features,\n",
    "            'importance': rf_model.feature_importances_\n",
    "        }).sort_values('importance', ascending=False)\n",
    "        \n",
    "        return rf_model, feature_importance\n",
    "    \n",
    "    # 3. LTV Analysis\n",
    "    def analyze_ltv(df):\n",
    "        # Calculate correlation between LTV and other metrics\n",
    "        ltv_correlations = df[[\n",
    "            'LTV', 'avg_monthly_charge', 'tenure', '데이터사용량',\n",
    "            '추천횟수', '만족도'\n",
    "        ]].corr()['LTV'].sort_values(ascending=False)\n",
    "        \n",
    "        # Calculate actual customer value\n",
    "        df['actual_value'] = df['avg_monthly_charge'] * df['tenure']\n",
    "        \n",
    "        # Compare actual value with LTV\n",
    "        ltv_accuracy = {\n",
    "            'correlation': np.corrcoef(df['actual_value'], df['LTV'])[0,1],\n",
    "            'mean_difference': (df['LTV'] - df['actual_value']).mean(),\n",
    "            'std_difference': (df['LTV'] - df['actual_value']).std()\n",
    "        }\n",
    "        \n",
    "        return ltv_correlations, ltv_accuracy\n",
    "    \n",
    "    # Run analyses\n",
    "    churn_model, feature_importance = analyze_churn(df)\n",
    "    ltv_correlations, ltv_accuracy = analyze_ltv(df)\n",
    "    \n",
    "    # Return results\n",
    "    results = {\n",
    "        'churn_feature_importance': feature_importance,\n",
    "        'ltv_correlations': ltv_correlations,\n",
    "        'ltv_accuracy': ltv_accuracy\n",
    "    }\n",
    "    \n",
    "    return results, df\n",
    "\n",
    "# Additional functions for visualization\n",
    "def plot_churn_analysis(df):\n",
    "    fig, axes = plt.subplots(2, 2, figsize=(15, 12))\n",
    "    \n",
    "    # Plot 1: Churn rate by satisfaction\n",
    "    sns.boxplot(x='고객이탈여부', y='만족도', data=df, ax=axes[0,0])\n",
    "    axes[0,0].set_title('Churn by Satisfaction Level')\n",
    "    \n",
    "    # Plot 2: Churn rate by tenure\n",
    "    sns.boxplot(x='고객이탈여부', y='tenure', data=df, ax=axes[0,1])\n",
    "    axes[0,1].set_title('Churn by Tenure')\n",
    "    \n",
    "    # Plot 3: Churn rate by monthly charge\n",
    "    sns.boxplot(x='고객이탈여부', y='avg_monthly_charge', data=df, ax=axes[1,0])\n",
    "    axes[1,0].set_title('Churn by Monthly Charge')\n",
    "    \n",
    "    # Plot 4: Churn rate by data usage\n",
    "    sns.boxplot(x='고객이탈여부', y='데이터사용량', data=df, ax=axes[1,1])\n",
    "    axes[1,1].set_title('Churn by Data Usage')\n",
    "    \n",
    "    plt.tight_layout()\n",
    "    return fig\n",
    "\n",
    "def plot_ltv_analysis(df):\n",
    "    fig, axes = plt.subplots(2, 2, figsize=(15, 12))\n",
    "    \n",
    "    # Plot 1: LTV vs Monthly Charge\n",
    "    sns.scatterplot(x='avg_monthly_charge', y='LTV', data=df, ax=axes[0,0])\n",
    "    axes[0,0].set_title('LTV vs Monthly Charge')\n",
    "    \n",
    "    # Plot 2: LTV vs Tenure\n",
    "    sns.scatterplot(x='tenure', y='LTV', data=df, ax=axes[0,1])\n",
    "    axes[0,1].set_title('LTV vs Tenure')\n",
    "    \n",
    "    # Plot 3: LTV vs Satisfaction\n",
    "    sns.boxplot(x='만족도', y='LTV', data=df, ax=axes[1,0])\n",
    "    axes[1,0].set_title('LTV by Satisfaction Level')\n",
    "    \n",
    "    # Plot 4: LTV Distribution\n",
    "    sns.histplot(data=df, x='LTV', ax=axes[1,1])\n",
    "    axes[1,1].set_title('LTV Distribution')\n",
    "    \n",
    "    plt.tight_layout()\n",
    "    return fig\n",
    "\n",
    "result, df = analyze_customer_data(df_customer=df_customer, df_charge=df_charge)\n",
    "# 테스트(향후 삭제 필요)\n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "from sklearn.metrics import classification_report, confusion_matrix, roc_curve, auc\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "# 1. Data Preprocessing (이전과 동일)\n",
    "columns_to_drop = ['고객ID', '시작일', '종료일', '시작일_dt', '종료일_dt', '이탈유형', 'actual_value', 'LTV', '만족도']\n",
    "\n",
    "X = df.drop(columns_to_drop + ['고객이탈여부'], axis=1)\n",
    "print(X.columns)\n",
    "# Encode categorical variables\n",
    "categorical_cols = X.select_dtypes(include=['object']).columns\n",
    "label_encoders = {}\n",
    "\n",
    "for col in categorical_cols:\n",
    "    label_encoders[col] = LabelEncoder()\n",
    "    X[col] = label_encoders[col].fit_transform(X[col])\n",
    "\n",
    "y = df['고객이탈여부'].map({'Yes': 1, 'No': 0})\n",
    "\n",
    "# Split the data\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)\n",
    "\n",
    "# 2. Model Training with Enhanced GridSearchCV\n",
    "# Define parameter grid with regularization parameters\n",
    "param_grid = {\n",
    "    'n_estimators': [100, 200, 300],\n",
    "    'max_depth': [3, 5, 7, 10],  # 더 작은 max_depth 값들\n",
    "    'min_samples_split': [5, 10, 15],  # 더 큰 min_samples_split 값들\n",
    "    'min_samples_leaf': [4, 8, 12],    # 더 큰 min_samples_leaf 값들\n",
    "#     'max_features': ['sqrt', 'log2'],\n",
    "#     'max_samples': [0.7, 0.8, 0.9],    # bootstrap sample size 제한\n",
    "#     'class_weight': ['balanced', 'balanced_subsample'],  # 클래스 불균형 처리\n",
    "}\n",
    "\n",
    "# Initialize base model with bootstrap\n",
    "rf_base = RandomForestClassifier(\n",
    "    random_state=42,\n",
    "    bootstrap=True,\n",
    "    oob_score=True  # Out-of-bag score 활성화\n",
    ")\n",
    "\n",
    "# Initialize GridSearchCV with stratified k-fold\n",
    "grid_search = GridSearchCV(\n",
    "    estimator=rf_base,\n",
    "    param_grid=param_grid,\n",
    "    cv=5,\n",
    "    n_jobs=-1,\n",
    "    scoring=['f1', 'roc_auc', 'precision', 'recall'],\n",
    "    refit='f1',\n",
    "    verbose=0,\n",
    "    return_train_score=True\n",
    ")\n",
    "\n",
    "# Fit GridSearchCV\n",
    "grid_search.fit(X_train, y_train)\n",
    "\n",
    "# 3. Model Evaluation\n",
    "best_model = grid_search.best_estimator_\n",
    "y_pred = best_model.predict(X_test)\n",
    "y_prob = best_model.predict_proba(X_test)[:,1]\n",
    "\n",
    "# Calculate cross-validation scores\n",
    "cv_scores = cross_val_score(best_model, X, y, cv=5, scoring='f1')\n",
    "\n",
    "# Calculate ROC curve\n",
    "fpr, tpr, thresholds = roc_curve(y_test, y_prob)\n",
    "roc_auc = auc(fpr, tpr)\n",
    "\n",
    "# Print results\n",
    "print(\"Best Parameters:\", grid_search.best_params_)\n",
    "print(\"\\nCross-validation scores:\", cv_scores)\n",
    "print(\"Mean CV score: {:.3f} (+/- {:.3f})\".format(cv_scores.mean(), cv_scores.std() * 2))\n",
    "print(\"\\nOut-of-bag score: {:.3f}\".format(best_model.oob_score_))\n",
    "print(\"\\nDetailed Classification Report:\")\n",
    "print(classification_report(y_test, y_pred, target_names=['Not Churned', 'Churned']))\n",
    "\n",
    "# 4. Visualizations\n",
    "# Plot ROC curve\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.plot(fpr, tpr, color='darkorange', lw=2, \n",
    "         label=f'ROC curve (AUC = {roc_auc:.2f})')\n",
    "plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')\n",
    "plt.xlim([0.0, 1.0])\n",
    "plt.ylim([0.0, 1.05])\n",
    "plt.xlabel('False Positive Rate')\n",
    "plt.ylabel('True Positive Rate')\n",
    "plt.title('Receiver Operating Characteristic (ROC) Curve')\n",
    "plt.legend(loc=\"lower right\")\n",
    "plt.grid(True)\n",
    "plt.tight_layout()\n",
    "\n",
    "# Plot feature importance\n",
    "feature_importance = pd.DataFrame({\n",
    "    'feature': X.columns,\n",
    "    'importance': best_model.feature_importances_\n",
    "}).sort_values('importance', ascending=False)\n",
    "\n",
    "plt.figure(figsize=(12, 6))\n",
    "sns.barplot(x='importance', y='feature', data=feature_importance.head(15))\n",
    "plt.title('Top 15 Most Important Features')\n",
    "plt.tight_layout()\n",
    "\n",
    "# Learning curves\n",
    "from sklearn.model_selection import learning_curve\n",
    "\n",
    "train_sizes, train_scores, valid_scores = learning_curve(\n",
    "    best_model, X, y, train_sizes=np.linspace(0.1, 1.0, 10),\n",
    "    cv=5, n_jobs=-1, scoring='f1'\n",
    ")\n",
    "\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.plot(train_sizes, train_scores.mean(axis=1), label='Training score')\n",
    "plt.plot(train_sizes, valid_scores.mean(axis=1), label='Cross-validation score')\n",
    "plt.xlabel('Training examples')\n",
    "plt.ylabel('F1 Score')\n",
    "plt.title('Learning Curves')\n",
    "plt.legend(loc='best')\n",
    "plt.grid(True)\n",
    "plt.tight_layout()\n",
    "\n",
    "# Save results\n",
    "results = {\n",
    "    'best_params': grid_search.best_params_,\n",
    "    'cv_scores': {\n",
    "        'mean': cv_scores.mean(),\n",
    "        'std': cv_scores.std(),\n",
    "        'all_scores': cv_scores\n",
    "    },\n",
    "    'oob_score': best_model.oob_score_,\n",
    "    'feature_importance': feature_importance,\n",
    "    'roc_auc': roc_auc,\n",
    "    'classification_report': classification_report(y_test, y_pred, target_names=['Not Churned', 'Churned']),\n",
    "    'confusion_matrix': confusion_matrix(y_test, y_pred)\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "ce3b8c63",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "모델이 'best_model.pkl' 파일로 저장되었습니다.\n"
     ]
    }
   ],
   "source": [
    "import pickle\n",
    "\n",
    "# 모델 저장\n",
    "with open('best_model.pkl', 'wb') as file:\n",
    "    pickle.dump(best_model, file)\n",
    "\n",
    "print(\"모델이 'best_model.pkl' 파일로 저장되었습니다.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "962e9932",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pickle\n",
    "\n",
    "# 모델 불러오기\n",
    "with open('best_model.pkl', 'rb') as file:\n",
    "    loaded_model = pickle.load(file)\n",
    "\n",
    "# 불러온 모델 사용\n",
    "predictions = loaded_model.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "c8a20de4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Note: you may need to restart the kernel to use updated packages.\n",
      "Collecting streamlit\n",
      "  Downloading streamlit-1.40.1-py2.py3-none-any.whl.metadata (8.5 kB)\n",
      "Collecting altair<6,>=4.0 (from streamlit)\n",
      "  Downloading altair-5.4.1-py3-none-any.whl.metadata (9.4 kB)\n",
      "Collecting blinker<2,>=1.0.0 (from streamlit)\n",
      "  Downloading blinker-1.9.0-py3-none-any.whl.metadata (1.6 kB)\n",
      "Requirement already satisfied: cachetools<6,>=4.0 in c:\\users\\choi hyeji\\anaconda3\\lib\\site-packages (from streamlit) (4.2.2)\n",
      "Requirement already satisfied: click<9,>=7.0 in c:\\users\\choi hyeji\\anaconda3\\lib\\site-packages (from streamlit) (8.0.4)\n",
      "Requirement already satisfied: numpy<3,>=1.20 in c:\\users\\choi hyeji\\anaconda3\\lib\\site-packages (from streamlit) (1.24.4)\n",
      "Requirement already satisfied: packaging<25,>=20 in c:\\users\\choi hyeji\\anaconda3\\lib\\site-packages (from streamlit) (21.3)\n",
      "Requirement already satisfied: pandas<3,>=1.4.0 in c:\\users\\choi hyeji\\anaconda3\\lib\\site-packages (from streamlit) (2.2.2)\n",
      "Requirement already satisfied: pillow<12,>=7.1.0 in c:\\users\\choi hyeji\\anaconda3\\lib\\site-packages (from streamlit) (9.2.0)\n",
      "Collecting protobuf<6,>=3.20 (from streamlit)\n",
      "  Downloading protobuf-5.28.3-cp39-cp39-win_amd64.whl.metadata (592 bytes)\n",
      "Collecting pyarrow>=7.0 (from streamlit)\n",
      "  Downloading pyarrow-18.0.0-cp39-cp39-win_amd64.whl.metadata (3.4 kB)\n",
      "Requirement already satisfied: requests<3,>=2.27 in c:\\users\\choi hyeji\\anaconda3\\lib\\site-packages (from streamlit) (2.28.1)\n",
      "Collecting rich<14,>=10.14.0 (from streamlit)\n",
      "  Downloading rich-13.9.4-py3-none-any.whl.metadata (18 kB)\n",
      "Collecting tenacity<10,>=8.1.0 (from streamlit)\n",
      "  Downloading tenacity-9.0.0-py3-none-any.whl.metadata (1.2 kB)\n",
      "Requirement already satisfied: toml<2,>=0.10.1 in c:\\users\\choi hyeji\\anaconda3\\lib\\site-packages (from streamlit) (0.10.2)\n",
      "Requirement already satisfied: typing-extensions<5,>=4.3.0 in c:\\users\\choi hyeji\\anaconda3\\lib\\site-packages (from streamlit) (4.12.2)\n",
      "Collecting gitpython!=3.1.19,<4,>=3.0.7 (from streamlit)\n",
      "  Downloading GitPython-3.1.43-py3-none-any.whl.metadata (13 kB)\n",
      "Collecting pydeck<1,>=0.8.0b4 (from streamlit)\n",
      "  Downloading pydeck-0.9.1-py2.py3-none-any.whl.metadata (4.1 kB)\n",
      "Requirement already satisfied: tornado<7,>=6.0.3 in c:\\users\\choi hyeji\\anaconda3\\lib\\site-packages (from streamlit) (6.1)\n",
      "Requirement already satisfied: watchdog<7,>=2.1.5 in c:\\users\\choi hyeji\\anaconda3\\lib\\site-packages (from streamlit) (2.1.6)\n",
      "Requirement already satisfied: jinja2 in c:\\users\\choi hyeji\\anaconda3\\lib\\site-packages (from altair<6,>=4.0->streamlit) (2.11.3)\n",
      "Requirement already satisfied: jsonschema>=3.0 in c:\\users\\choi hyeji\\anaconda3\\lib\\site-packages (from altair<6,>=4.0->streamlit) (4.4.0)\n",
      "Collecting narwhals>=1.5.2 (from altair<6,>=4.0->streamlit)\n",
      "  Downloading narwhals-1.13.5-py3-none-any.whl.metadata (7.4 kB)\n",
      "Requirement already satisfied: colorama in c:\\users\\choi hyeji\\anaconda3\\lib\\site-packages (from click<9,>=7.0->streamlit) (0.4.5)\n",
      "Collecting gitdb<5,>=4.0.1 (from gitpython!=3.1.19,<4,>=3.0.7->streamlit)\n",
      "  Downloading gitdb-4.0.11-py3-none-any.whl.metadata (1.2 kB)\n",
      "Requirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in c:\\users\\choi hyeji\\anaconda3\\lib\\site-packages (from packaging<25,>=20->streamlit) (3.0.9)\n",
      "Requirement already satisfied: python-dateutil>=2.8.2 in c:\\users\\choi hyeji\\anaconda3\\lib\\site-packages (from pandas<3,>=1.4.0->streamlit) (2.8.2)\n",
      "Requirement already satisfied: pytz>=2020.1 in c:\\users\\choi hyeji\\anaconda3\\lib\\site-packages (from pandas<3,>=1.4.0->streamlit) (2023.3)\n",
      "Requirement already satisfied: tzdata>=2022.7 in c:\\users\\choi hyeji\\anaconda3\\lib\\site-packages (from pandas<3,>=1.4.0->streamlit) (2024.1)\n",
      "Requirement already satisfied: charset-normalizer<3,>=2 in c:\\users\\choi hyeji\\anaconda3\\lib\\site-packages (from requests<3,>=2.27->streamlit) (2.0.4)\n",
      "Requirement already satisfied: idna<4,>=2.5 in c:\\users\\choi hyeji\\anaconda3\\lib\\site-packages (from requests<3,>=2.27->streamlit) (3.3)\n",
      "Requirement already satisfied: urllib3<1.27,>=1.21.1 in c:\\users\\choi hyeji\\anaconda3\\lib\\site-packages (from requests<3,>=2.27->streamlit) (1.26.11)\n",
      "Requirement already satisfied: certifi>=2017.4.17 in c:\\users\\choi hyeji\\anaconda3\\lib\\site-packages (from requests<3,>=2.27->streamlit) (2024.7.4)\n",
      "Collecting markdown-it-py>=2.2.0 (from rich<14,>=10.14.0->streamlit)\n",
      "  Downloading markdown_it_py-3.0.0-py3-none-any.whl.metadata (6.9 kB)\n",
      "Collecting pygments<3.0.0,>=2.13.0 (from rich<14,>=10.14.0->streamlit)\n",
      "  Downloading pygments-2.18.0-py3-none-any.whl.metadata (2.5 kB)\n",
      "Collecting smmap<6,>=3.0.1 (from gitdb<5,>=4.0.1->gitpython!=3.1.19,<4,>=3.0.7->streamlit)\n",
      "  Downloading smmap-5.0.1-py3-none-any.whl.metadata (4.3 kB)\n",
      "Requirement already satisfied: MarkupSafe>=0.23 in c:\\users\\choi hyeji\\anaconda3\\lib\\site-packages (from jinja2->altair<6,>=4.0->streamlit) (2.0.1)\n",
      "Requirement already satisfied: attrs>=17.4.0 in c:\\users\\choi hyeji\\anaconda3\\lib\\site-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (24.2.0)\n",
      "Requirement already satisfied: pyrsistent!=0.17.0,!=0.17.1,!=0.17.2,>=0.14.0 in c:\\users\\choi hyeji\\anaconda3\\lib\\site-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (0.18.0)\n",
      "Collecting mdurl~=0.1 (from markdown-it-py>=2.2.0->rich<14,>=10.14.0->streamlit)\n",
      "  Downloading mdurl-0.1.2-py3-none-any.whl.metadata (1.6 kB)\n",
      "Requirement already satisfied: six>=1.5 in c:\\users\\choi hyeji\\anaconda3\\lib\\site-packages (from python-dateutil>=2.8.2->pandas<3,>=1.4.0->streamlit) (1.16.0)\n",
      "Downloading streamlit-1.40.1-py2.py3-none-any.whl (8.6 MB)\n",
      "   ---------------------------------------- 8.6/8.6 MB 5.0 MB/s eta 0:00:00\n",
      "Downloading altair-5.4.1-py3-none-any.whl (658 kB)\n",
      "   ---------------------------------------- 658.1/658.1 kB 6.4 MB/s eta 0:00:00\n",
      "Downloading blinker-1.9.0-py3-none-any.whl (8.5 kB)\n",
      "Downloading GitPython-3.1.43-py3-none-any.whl (207 kB)\n",
      "Downloading protobuf-5.28.3-cp39-cp39-win_amd64.whl (431 kB)\n",
      "Downloading pyarrow-18.0.0-cp39-cp39-win_amd64.whl (25.1 MB)\n",
      "   ---------------------------------------- 25.1/25.1 MB 7.2 MB/s eta 0:00:00\n",
      "Downloading pydeck-0.9.1-py2.py3-none-any.whl (6.9 MB)\n",
      "   ---------------------------------------- 6.9/6.9 MB 7.3 MB/s eta 0:00:00\n",
      "Downloading rich-13.9.4-py3-none-any.whl (242 kB)\n",
      "Downloading tenacity-9.0.0-py3-none-any.whl (28 kB)\n",
      "Downloading gitdb-4.0.11-py3-none-any.whl (62 kB)\n",
      "Downloading markdown_it_py-3.0.0-py3-none-any.whl (87 kB)\n",
      "Downloading narwhals-1.13.5-py3-none-any.whl (208 kB)\n",
      "Downloading pygments-2.18.0-py3-none-any.whl (1.2 MB)\n",
      "   ---------------------------------------- 1.2/1.2 MB 7.5 MB/s eta 0:00:00\n",
      "Downloading mdurl-0.1.2-py3-none-any.whl (10.0 kB)\n",
      "Downloading smmap-5.0.1-py3-none-any.whl (24 kB)\n",
      "Installing collected packages: tenacity, smmap, pygments, pyarrow, protobuf, narwhals, mdurl, blinker, pydeck, markdown-it-py, gitdb, altair, rich, gitpython, streamlit\n",
      "  Attempting uninstall: tenacity\n",
      "    Found existing installation: tenacity 8.0.1\n",
      "    Uninstalling tenacity-8.0.1:\n",
      "      Successfully uninstalled tenacity-8.0.1\n",
      "  Attempting uninstall: pygments\n",
      "    Found existing installation: Pygments 2.11.2\n",
      "    Uninstalling Pygments-2.11.2:\n",
      "      Successfully uninstalled Pygments-2.11.2\n",
      "  Attempting uninstall: protobuf\n",
      "    Found existing installation: protobuf 3.19.5\n",
      "    Uninstalling protobuf-3.19.5:\n",
      "      Successfully uninstalled protobuf-3.19.5\n",
      "Successfully installed altair-5.4.1 blinker-1.9.0 gitdb-4.0.11 gitpython-3.1.43 markdown-it-py-3.0.0 mdurl-0.1.2 narwhals-1.13.5 protobuf-5.28.3 pyarrow-18.0.0 pydeck-0.9.1 pygments-2.18.0 rich-13.9.4 smmap-5.0.1 streamlit-1.40.1 tenacity-9.0.0\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "ERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\n",
      "spyder 5.1.5 requires pyqt5<5.13, which is not installed.\n",
      "spyder 5.1.5 requires pyqtwebengine<5.13, which is not installed.\n",
      "google-api-core 2.10.1 requires protobuf<5.0.0dev,>=3.20.1, but you have protobuf 5.28.3 which is incompatible.\n",
      "googleapis-common-protos 1.56.4 requires protobuf<5.0.0dev,>=3.15.0, but you have protobuf 5.28.3 which is incompatible.\n",
      "tensorboard 2.10.0 requires protobuf<3.20,>=3.9.2, but you have protobuf 5.28.3 which is incompatible.\n",
      "tensorflow 2.10.0 requires protobuf<3.20,>=3.9.2, but you have protobuf 5.28.3 which is incompatible.\n"
     ]
    }
   ],
   "source": [
    "pip install streamlit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "4cf5fc99",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-11-13 23:15:14.263 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:15:14.264 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:15:14.265 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:15:14.265 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:15:14.267 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:15:14.268 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:15:14.269 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:15:14.270 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:15:14.271 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:15:14.274 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:15:14.275 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:15:14.276 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:15:14.277 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:15:14.278 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:15:14.279 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:15:14.280 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:15:14.281 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:15:14.282 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:15:14.283 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:15:14.284 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:15:14.286 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:15:14.287 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:15:14.288 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:15:14.290 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:15:14.291 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:15:14.293 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:15:14.294 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:15:14.297 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n"
     ]
    },
    {
     "ename": "KeyError",
     "evalue": "'avg_monthly_charge'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "File \u001b[1;32m~\\anaconda3\\lib\\site-packages\\pandas\\core\\indexes\\base.py:3805\u001b[0m, in \u001b[0;36mIndex.get_loc\u001b[1;34m(self, key)\u001b[0m\n\u001b[0;32m   3804\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m-> 3805\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_engine\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget_loc\u001b[49m\u001b[43m(\u001b[49m\u001b[43mcasted_key\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m   3806\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m err:\n",
      "File \u001b[1;32mindex.pyx:167\u001b[0m, in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[1;34m()\u001b[0m\n",
      "File \u001b[1;32mindex.pyx:196\u001b[0m, in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[1;34m()\u001b[0m\n",
      "File \u001b[1;32mpandas\\\\_libs\\\\hashtable_class_helper.pxi:7081\u001b[0m, in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[1;34m()\u001b[0m\n",
      "File \u001b[1;32mpandas\\\\_libs\\\\hashtable_class_helper.pxi:7089\u001b[0m, in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[1;34m()\u001b[0m\n",
      "\u001b[1;31mKeyError\u001b[0m: 'avg_monthly_charge'",
      "\nThe above exception was the direct cause of the following exception:\n",
      "\u001b[1;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "Input \u001b[1;32mIn [12]\u001b[0m, in \u001b[0;36m<cell line: 20>\u001b[1;34m()\u001b[0m\n\u001b[0;32m     19\u001b[0m new_customer \u001b[38;5;241m=\u001b[39m {}\n\u001b[0;32m     20\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m col \u001b[38;5;129;01min\u001b[39;00m columns:\n\u001b[1;32m---> 21\u001b[0m     new_customer[col] \u001b[38;5;241m=\u001b[39m st\u001b[38;5;241m.\u001b[39mnumber_input(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mcol\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m 입력\u001b[39m\u001b[38;5;124m'\u001b[39m, value\u001b[38;5;241m=\u001b[39m\u001b[43mdf\u001b[49m\u001b[43m[\u001b[49m\u001b[43mcol\u001b[49m\u001b[43m]\u001b[49m\u001b[38;5;241m.\u001b[39mmean())\n\u001b[0;32m     23\u001b[0m \u001b[38;5;66;03m# 2. 이탈 확률 예측\u001b[39;00m\n\u001b[0;32m     24\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m st\u001b[38;5;241m.\u001b[39mbutton(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m이탈 확률 예측\u001b[39m\u001b[38;5;124m'\u001b[39m):\n",
      "File \u001b[1;32m~\\anaconda3\\lib\\site-packages\\pandas\\core\\frame.py:4102\u001b[0m, in \u001b[0;36mDataFrame.__getitem__\u001b[1;34m(self, key)\u001b[0m\n\u001b[0;32m   4100\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mcolumns\u001b[38;5;241m.\u001b[39mnlevels \u001b[38;5;241m>\u001b[39m \u001b[38;5;241m1\u001b[39m:\n\u001b[0;32m   4101\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_getitem_multilevel(key)\n\u001b[1;32m-> 4102\u001b[0m indexer \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mcolumns\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget_loc\u001b[49m\u001b[43m(\u001b[49m\u001b[43mkey\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m   4103\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m is_integer(indexer):\n\u001b[0;32m   4104\u001b[0m     indexer \u001b[38;5;241m=\u001b[39m [indexer]\n",
      "File \u001b[1;32m~\\anaconda3\\lib\\site-packages\\pandas\\core\\indexes\\base.py:3812\u001b[0m, in \u001b[0;36mIndex.get_loc\u001b[1;34m(self, key)\u001b[0m\n\u001b[0;32m   3807\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(casted_key, \u001b[38;5;28mslice\u001b[39m) \u001b[38;5;129;01mor\u001b[39;00m (\n\u001b[0;32m   3808\u001b[0m         \u001b[38;5;28misinstance\u001b[39m(casted_key, abc\u001b[38;5;241m.\u001b[39mIterable)\n\u001b[0;32m   3809\u001b[0m         \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;28many\u001b[39m(\u001b[38;5;28misinstance\u001b[39m(x, \u001b[38;5;28mslice\u001b[39m) \u001b[38;5;28;01mfor\u001b[39;00m x \u001b[38;5;129;01min\u001b[39;00m casted_key)\n\u001b[0;32m   3810\u001b[0m     ):\n\u001b[0;32m   3811\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m InvalidIndexError(key)\n\u001b[1;32m-> 3812\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m(key) \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01merr\u001b[39;00m\n\u001b[0;32m   3813\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mTypeError\u001b[39;00m:\n\u001b[0;32m   3814\u001b[0m     \u001b[38;5;66;03m# If we have a listlike key, _check_indexing_error will raise\u001b[39;00m\n\u001b[0;32m   3815\u001b[0m     \u001b[38;5;66;03m#  InvalidIndexError. Otherwise we fall through and re-raise\u001b[39;00m\n\u001b[0;32m   3816\u001b[0m     \u001b[38;5;66;03m#  the TypeError.\u001b[39;00m\n\u001b[0;32m   3817\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_check_indexing_error(key)\n",
      "\u001b[1;31mKeyError\u001b[0m: 'avg_monthly_charge'"
     ]
    }
   ],
   "source": [
    "import streamlit as st\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import joblib\n",
    "\n",
    "# 모델과 스케일러 불러오기\n",
    "model = joblib.load('best_model.pkl')\n",
    "\n",
    "# 기존 데이터 불러오기 (예시)\n",
    "df = pd.read_csv('DS_Customer_data_modified2.csv')\n",
    "\n",
    "st.title('고객 이탈 예측 대시보드')\n",
    "\n",
    "# 1. 신규 고객 데이터 입력\n",
    "st.header('1. 신규 고객 데이터 입력')\n",
    "columns = ['연령', '부양자수', '추천횟수', '데이터사용량', 'avg_monthly_charge', 'std_monthly_charge', '만족도']\n",
    "new_customer = {}\n",
    "for col in columns:\n",
    "    new_customer[col] = st.number_input(f'{col} 입력', value=df[col].mean())\n",
    "\n",
    "# 2. 이탈 확률 예측\n",
    "if st.button('이탈 확률 예측'):\n",
    "    input_data = scaler.transform(np.array(list(new_customer.values())).reshape(1, -1))\n",
    "    churn_prob = model.predict_proba(input_data)[0][1]\n",
    "    st.write(f'이 고객의 이탈 확률은 {churn_prob:.2%}입니다.')\n",
    "\n",
    "    # 3. 분포 시각화\n",
    "    st.header('3. 고객 데이터 분포 비교')\n",
    "    fig, ax = plt.subplots()\n",
    "    sns.histplot(data=df, x='avg_monthly_charge', kde=True, ax=ax)\n",
    "    ax.axvline(new_customer['avg_monthly_charge'], color='r', linestyle='--')\n",
    "    ax.set_title('평균 월별 요금 분포')\n",
    "    st.pyplot(fig)\n",
    "\n",
    "    percentile = sum(df['avg_monthly_charge'] < new_customer['avg_monthly_charge']) / len(df) * 100\n",
    "    st.write(f'이 고객의 평균 월별 요금은 상위 {100-percentile:.2f}%에 해당합니다.')\n",
    "\n",
    "    # 4. 기존 고객 평균과 비교\n",
    "    st.header('4. 기존 고객 평균과 비교')\n",
    "    fig, ax = plt.subplots(figsize=(10, 6))\n",
    "    x = np.arange(len(columns))\n",
    "    width = 0.35\n",
    "\n",
    "    avg_values = df[columns].mean()\n",
    "    new_values = [new_customer[col] for col in columns]\n",
    "\n",
    "    ax.bar(x - width/2, avg_values, width, label='기존 고객 평균')\n",
    "    ax.bar(x + width/2, new_values, width, label='신규 고객')\n",
    "\n",
    "    ax.set_xticks(x)\n",
    "    ax.set_xticklabels(columns, rotation=45, ha='right')\n",
    "    ax.legend()\n",
    "    ax.set_title('신규 고객과 기존 고객 평균 비교')\n",
    "\n",
    "    st.pyplot(fig)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "559aec2c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best Parameters: {'max_depth': 10, 'min_samples_leaf': 4, 'min_samples_split': 10, 'n_estimators': 200}\n",
      "\n",
      "Cross-validation scores: [0.91968504 0.90649762 0.91365777 0.90937997 0.90909091]\n",
      "Mean CV score: 0.912 (+/- 0.009)\n",
      "\n",
      "Out-of-bag score: 0.958\n",
      "\n",
      "Detailed Classification Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      " Not Churned       0.97      1.00      0.98      1033\n",
      "     Churned       0.99      0.89      0.94       340\n",
      "\n",
      "    accuracy                           0.97      1373\n",
      "   macro avg       0.98      0.95      0.96      1373\n",
      "weighted avg       0.97      0.97      0.97      1373\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1200x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model saved as 'best_model.pkl'\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score, learning_curve\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "from sklearn.metrics import classification_report, confusion_matrix, roc_curve, auc\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import matplotlib.font_manager as fm\n",
    "\n",
    "font_path = \"C:/Windows/Fonts/malgun.ttf\"\n",
    "prop = fm.FontProperties(fname=font_path)\n",
    "plt.rcParams['font.family'] = prop.get_name()\n",
    "\n",
    "# 데이터 로드\n",
    "df_customer = pd.read_csv(r'C:\\Users\\Choi Hyeji\\Desktop\\통신사\\DS_Customer_data_modified2.csv', index_col=0)\n",
    "df_charge = pd.read_csv(r'C:\\Users\\Choi Hyeji\\Desktop\\통신사\\DS_Charge_data.csv', index_col=0, encoding='cp949')\n",
    "\n",
    "# 연령대 분류 함수\n",
    "def age_bound(x):\n",
    "    if x < 20: return '20대 미만'\n",
    "    elif 20 <= x < 30: return '20대'\n",
    "    elif 30 <= x < 40: return '30대'\n",
    "    elif 40 <= x < 50: return '40대'\n",
    "    elif 50 <= x < 60: return '50대'\n",
    "    elif 60 <= x < 70: return '60대'\n",
    "    elif 70 <= x < 80: return '70대'\n",
    "    elif 80 <= x: return '80대 이상'\n",
    "\n",
    "# 데이터 전처리\n",
    "df_customer['연령대'] = df_customer['연령'].apply(age_bound)\n",
    "df_customer.drop(columns=['유지기간', '유지기간(년)', '고객월평균납부액', '데이터사용구간'], inplace=True)\n",
    "df_customer['tenure'] = (pd.to_datetime(df_customer['종료일']) - pd.to_datetime(df_customer['시작일'])).dt.days\n",
    "\n",
    "df_charge['과금일'] = pd.to_datetime(df_charge['과금일'])\n",
    "monthly_charges = df_charge.groupby('고객ID')['과금액'].agg(['mean', 'std']).reset_index()\n",
    "monthly_charges.columns = ['고객ID', 'avg_monthly_charge', 'std_monthly_charge']\n",
    "\n",
    "df = pd.merge(df_customer, monthly_charges, on='고객ID', how='left')\n",
    "\n",
    "# 특성 선택\n",
    "columns_to_drop = ['고객ID', '시작일', '종료일', '시작일_dt', '종료일_dt', '이탈유형', 'LTV', '만족도']\n",
    "X = df.drop(columns_to_drop + ['고객이탈여부'], axis=1)\n",
    "\n",
    "# 범주형 변수 인코딩\n",
    "categorical_cols = X.select_dtypes(include=['object']).columns\n",
    "label_encoders = {}\n",
    "for col in categorical_cols:\n",
    "    label_encoders[col] = LabelEncoder()\n",
    "    X[col] = label_encoders[col].fit_transform(X[col])\n",
    "\n",
    "y = df['고객이탈여부'].map({'Yes': 1, 'No': 0})\n",
    "\n",
    "# 데이터 분할\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)\n",
    "\n",
    "# 모델 학습\n",
    "param_grid = {\n",
    "    'n_estimators': [100, 200, 300],\n",
    "    'max_depth': [3, 5, 7, 10],\n",
    "    'min_samples_split': [5, 10, 15],\n",
    "    'min_samples_leaf': [4, 8, 12],\n",
    "}\n",
    "\n",
    "rf_base = RandomForestClassifier(random_state=42, bootstrap=True, oob_score=True)\n",
    "\n",
    "grid_search = GridSearchCV(\n",
    "    estimator=rf_base,\n",
    "    param_grid=param_grid,\n",
    "    cv=5,\n",
    "    n_jobs=-1,\n",
    "    scoring=['f1', 'roc_auc', 'precision', 'recall'],\n",
    "    refit='f1',\n",
    "    verbose=0,\n",
    "    return_train_score=True\n",
    ")\n",
    "\n",
    "grid_search.fit(X_train, y_train)\n",
    "\n",
    "# 모델 평가\n",
    "best_model = grid_search.best_estimator_\n",
    "y_pred = best_model.predict(X_test)\n",
    "y_prob = best_model.predict_proba(X_test)[:,1]\n",
    "\n",
    "cv_scores = cross_val_score(best_model, X, y, cv=5, scoring='f1')\n",
    "\n",
    "fpr, tpr, thresholds = roc_curve(y_test, y_prob)\n",
    "roc_auc = auc(fpr, tpr)\n",
    "\n",
    "# 결과 출력\n",
    "print(\"Best Parameters:\", grid_search.best_params_)\n",
    "print(\"\\nCross-validation scores:\", cv_scores)\n",
    "print(\"Mean CV score: {:.3f} (+/- {:.3f})\".format(cv_scores.mean(), cv_scores.std() * 2))\n",
    "print(\"\\nOut-of-bag score: {:.3f}\".format(best_model.oob_score_))\n",
    "print(\"\\nDetailed Classification Report:\")\n",
    "print(classification_report(y_test, y_pred, target_names=['Not Churned', 'Churned']))\n",
    "\n",
    "# 시각화\n",
    "def plot_roc_curve():\n",
    "    plt.figure(figsize=(8, 6))\n",
    "    plt.plot(fpr, tpr, color='darkorange', lw=2, label=f'ROC curve (AUC = {roc_auc:.2f})')\n",
    "    plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')\n",
    "    plt.xlim([0.0, 1.0])\n",
    "    plt.ylim([0.0, 1.05])\n",
    "    plt.xlabel('False Positive Rate')\n",
    "    plt.ylabel('True Positive Rate')\n",
    "    plt.title('Receiver Operating Characteristic (ROC) Curve')\n",
    "    plt.legend(loc=\"lower right\")\n",
    "    plt.grid(True)\n",
    "    plt.tight_layout()\n",
    "    plt.show()\n",
    "\n",
    "def plot_feature_importance():\n",
    "    feature_importance = pd.DataFrame({\n",
    "        'feature': X.columns,\n",
    "        'importance': best_model.feature_importances_\n",
    "    }).sort_values('importance', ascending=False)\n",
    "    \n",
    "    plt.figure(figsize=(12, 6))\n",
    "    sns.barplot(x='importance', y='feature', data=feature_importance.head(15))\n",
    "    plt.title('Top 15 Most Important Features')\n",
    "    plt.tight_layout()\n",
    "    plt.show()\n",
    "\n",
    "def plot_learning_curves():\n",
    "    train_sizes, train_scores, valid_scores = learning_curve(\n",
    "        best_model, X, y, train_sizes=np.linspace(0.1, 1.0, 10), cv=5, n_jobs=-1, scoring='f1'\n",
    "    )\n",
    "    plt.figure(figsize=(10, 6))\n",
    "    plt.plot(train_sizes, train_scores.mean(axis=1), label='Training score')\n",
    "    plt.plot(train_sizes, valid_scores.mean(axis=1), label='Cross-validation score')\n",
    "    plt.xlabel('Training examples')\n",
    "    plt.ylabel('F1 Score')\n",
    "    plt.title('Learning Curves')\n",
    "    plt.legend(loc='best')\n",
    "    plt.grid(True)\n",
    "    plt.tight_layout()\n",
    "    plt.show()\n",
    "\n",
    "# 시각화 함수 호출\n",
    "plot_roc_curve()\n",
    "plot_feature_importance()\n",
    "plot_learning_curves()\n",
    "\n",
    "# 결과 저장\n",
    "results = {\n",
    "    'best_params': grid_search.best_params_,\n",
    "    'cv_scores': {\n",
    "        'mean': cv_scores.mean(),\n",
    "        'std': cv_scores.std(),\n",
    "        'all_scores': cv_scores\n",
    "    },\n",
    "    'oob_score': best_model.oob_score_,\n",
    "    'feature_importance': feature_importance,\n",
    "    'roc_auc': roc_auc,\n",
    "    'classification_report': classification_report(y_test, y_pred, target_names=['Not Churned', 'Churned']),\n",
    "    'confusion_matrix': confusion_matrix(y_test, y_pred)\n",
    "}\n",
    "\n",
    "# 모델 저장\n",
    "import joblib\n",
    "joblib.dump(best_model, 'best_model.pkl')\n",
    "print(\"Model saved as 'best_model.pkl'\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "6ac51577",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: streamlit in c:\\users\\choi hyeji\\anaconda3\\lib\\site-packages (1.40.1)\n",
      "Requirement already satisfied: altair<6,>=4.0 in c:\\users\\choi hyeji\\anaconda3\\lib\\site-packages (from streamlit) (5.4.1)\n",
      "Requirement already satisfied: blinker<2,>=1.0.0 in c:\\users\\choi hyeji\\anaconda3\\lib\\site-packages (from streamlit) (1.9.0)\n",
      "Requirement already satisfied: cachetools<6,>=4.0 in c:\\users\\choi hyeji\\anaconda3\\lib\\site-packages (from streamlit) (4.2.2)\n",
      "Requirement already satisfied: click<9,>=7.0 in c:\\users\\choi hyeji\\anaconda3\\lib\\site-packages (from streamlit) (8.0.4)\n",
      "Requirement already satisfied: numpy<3,>=1.20 in c:\\users\\choi hyeji\\anaconda3\\lib\\site-packages (from streamlit) (1.24.4)\n",
      "Requirement already satisfied: packaging<25,>=20 in c:\\users\\choi hyeji\\anaconda3\\lib\\site-packages (from streamlit) (21.3)\n",
      "Requirement already satisfied: pandas<3,>=1.4.0 in c:\\users\\choi hyeji\\anaconda3\\lib\\site-packages (from streamlit) (2.2.2)\n",
      "Requirement already satisfied: pillow<12,>=7.1.0 in c:\\users\\choi hyeji\\anaconda3\\lib\\site-packages (from streamlit) (9.2.0)\n",
      "Requirement already satisfied: protobuf<6,>=3.20 in c:\\users\\choi hyeji\\anaconda3\\lib\\site-packages (from streamlit) (5.28.3)\n",
      "Requirement already satisfied: pyarrow>=7.0 in c:\\users\\choi hyeji\\anaconda3\\lib\\site-packages (from streamlit) (18.0.0)\n",
      "Requirement already satisfied: requests<3,>=2.27 in c:\\users\\choi hyeji\\anaconda3\\lib\\site-packages (from streamlit) (2.28.1)\n",
      "Requirement already satisfied: rich<14,>=10.14.0 in c:\\users\\choi hyeji\\anaconda3\\lib\\site-packages (from streamlit) (13.9.4)\n",
      "Requirement already satisfied: tenacity<10,>=8.1.0 in c:\\users\\choi hyeji\\anaconda3\\lib\\site-packages (from streamlit) (9.0.0)\n",
      "Requirement already satisfied: toml<2,>=0.10.1 in c:\\users\\choi hyeji\\anaconda3\\lib\\site-packages (from streamlit) (0.10.2)\n",
      "Requirement already satisfied: typing-extensions<5,>=4.3.0 in c:\\users\\choi hyeji\\anaconda3\\lib\\site-packages (from streamlit) (4.12.2)\n",
      "Requirement already satisfied: gitpython!=3.1.19,<4,>=3.0.7 in c:\\users\\choi hyeji\\anaconda3\\lib\\site-packages (from streamlit) (3.1.43)\n",
      "Requirement already satisfied: pydeck<1,>=0.8.0b4 in c:\\users\\choi hyeji\\anaconda3\\lib\\site-packages (from streamlit) (0.9.1)\n",
      "Requirement already satisfied: tornado<7,>=6.0.3 in c:\\users\\choi hyeji\\anaconda3\\lib\\site-packages (from streamlit) (6.1)\n",
      "Requirement already satisfied: watchdog<7,>=2.1.5 in c:\\users\\choi hyeji\\anaconda3\\lib\\site-packages (from streamlit) (2.1.6)\n",
      "Requirement already satisfied: jinja2 in c:\\users\\choi hyeji\\anaconda3\\lib\\site-packages (from altair<6,>=4.0->streamlit) (2.11.3)\n",
      "Requirement already satisfied: jsonschema>=3.0 in c:\\users\\choi hyeji\\anaconda3\\lib\\site-packages (from altair<6,>=4.0->streamlit) (4.4.0)\n",
      "Requirement already satisfied: narwhals>=1.5.2 in c:\\users\\choi hyeji\\anaconda3\\lib\\site-packages (from altair<6,>=4.0->streamlit) (1.13.5)\n",
      "Requirement already satisfied: colorama in c:\\users\\choi hyeji\\anaconda3\\lib\\site-packages (from click<9,>=7.0->streamlit) (0.4.5)\n",
      "Requirement already satisfied: gitdb<5,>=4.0.1 in c:\\users\\choi hyeji\\anaconda3\\lib\\site-packages (from gitpython!=3.1.19,<4,>=3.0.7->streamlit) (4.0.11)\n",
      "Requirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in c:\\users\\choi hyeji\\anaconda3\\lib\\site-packages (from packaging<25,>=20->streamlit) (3.0.9)\n",
      "Requirement already satisfied: python-dateutil>=2.8.2 in c:\\users\\choi hyeji\\anaconda3\\lib\\site-packages (from pandas<3,>=1.4.0->streamlit) (2.8.2)\n",
      "Requirement already satisfied: pytz>=2020.1 in c:\\users\\choi hyeji\\anaconda3\\lib\\site-packages (from pandas<3,>=1.4.0->streamlit) (2023.3)\n",
      "Requirement already satisfied: tzdata>=2022.7 in c:\\users\\choi hyeji\\anaconda3\\lib\\site-packages (from pandas<3,>=1.4.0->streamlit) (2024.1)\n",
      "Requirement already satisfied: charset-normalizer<3,>=2 in c:\\users\\choi hyeji\\anaconda3\\lib\\site-packages (from requests<3,>=2.27->streamlit) (2.0.4)\n",
      "Requirement already satisfied: idna<4,>=2.5 in c:\\users\\choi hyeji\\anaconda3\\lib\\site-packages (from requests<3,>=2.27->streamlit) (3.3)\n",
      "Requirement already satisfied: urllib3<1.27,>=1.21.1 in c:\\users\\choi hyeji\\anaconda3\\lib\\site-packages (from requests<3,>=2.27->streamlit) (1.26.11)\n",
      "Requirement already satisfied: certifi>=2017.4.17 in c:\\users\\choi hyeji\\anaconda3\\lib\\site-packages (from requests<3,>=2.27->streamlit) (2024.7.4)\n",
      "Requirement already satisfied: markdown-it-py>=2.2.0 in c:\\users\\choi hyeji\\anaconda3\\lib\\site-packages (from rich<14,>=10.14.0->streamlit) (3.0.0)\n",
      "Requirement already satisfied: pygments<3.0.0,>=2.13.0 in c:\\users\\choi hyeji\\anaconda3\\lib\\site-packages (from rich<14,>=10.14.0->streamlit) (2.18.0)\n",
      "Requirement already satisfied: smmap<6,>=3.0.1 in c:\\users\\choi hyeji\\anaconda3\\lib\\site-packages (from gitdb<5,>=4.0.1->gitpython!=3.1.19,<4,>=3.0.7->streamlit) (5.0.1)\n",
      "Requirement already satisfied: MarkupSafe>=0.23 in c:\\users\\choi hyeji\\anaconda3\\lib\\site-packages (from jinja2->altair<6,>=4.0->streamlit) (2.0.1)\n",
      "Requirement already satisfied: attrs>=17.4.0 in c:\\users\\choi hyeji\\anaconda3\\lib\\site-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (24.2.0)\n",
      "Requirement already satisfied: pyrsistent!=0.17.0,!=0.17.1,!=0.17.2,>=0.14.0 in c:\\users\\choi hyeji\\anaconda3\\lib\\site-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (0.18.0)\n",
      "Requirement already satisfied: mdurl~=0.1 in c:\\users\\choi hyeji\\anaconda3\\lib\\site-packages (from markdown-it-py>=2.2.0->rich<14,>=10.14.0->streamlit) (0.1.2)\n",
      "Requirement already satisfied: six>=1.5 in c:\\users\\choi hyeji\\anaconda3\\lib\\site-packages (from python-dateutil>=2.8.2->pandas<3,>=1.4.0->streamlit) (1.16.0)\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install --upgrade streamlit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "7a51b7d4",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-11-13 23:41:10.281 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.282 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.283 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.284 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.286 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.287 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.288 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.289 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.290 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.291 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.295 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.296 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.297 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.298 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.300 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.302 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.303 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.305 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.305 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.306 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.307 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.308 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.311 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.313 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.314 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.315 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.317 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.319 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.324 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.326 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.327 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.328 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.330 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.331 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.334 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.335 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.336 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.338 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.339 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.340 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.344 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.346 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.347 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.349 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.351 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.353 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.355 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.357 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.358 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.361 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.362 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.363 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.366 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.368 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.369 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.370 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.371 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.373 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.376 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.378 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.379 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.380 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.382 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.384 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.392 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.393 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-11-13 23:41:10.395 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.397 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.398 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.400 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.403 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.404 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.405 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.406 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.407 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.408 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.411 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.412 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.413 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.414 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.416 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.417 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.420 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.426 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.428 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.429 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.431 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.432 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.435 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.438 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.440 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.440 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.441 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.443 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.445 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.446 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.448 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.449 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.696 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.697 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.699 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.700 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.701 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.702 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.705 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.706 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.709 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.710 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.715 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.716 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.717 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.719 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.721 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.723 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.724 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.725 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.726 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.727 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.728 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.729 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.730 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.732 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.748 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.749 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.750 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.752 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.754 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.755 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.756 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.757 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.761 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.762 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-11-13 23:41:10.763 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.765 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.766 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.768 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.771 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.772 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.774 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.775 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.777 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.778 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.779 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.782 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.783 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.784 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.785 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.785 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.787 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.789 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.790 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.791 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.792 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.793 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.796 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.797 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.798 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.798 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.799 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.800 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.802 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.803 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.804 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.805 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.806 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.807 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.808 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.809 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.810 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.811 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.815 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.816 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.817 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.817 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.819 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.820 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2024-11-13 23:41:10.821 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n"
     ]
    }
   ],
   "source": [
    "import streamlit as st\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import joblib\n",
    "\n",
    "# 모델 불러오기\n",
    "model = joblib.load('best_model.pkl')\n",
    "\n",
    "# 데이터 불러오기\n",
    "df = pd.read_csv('DS_Customer_data_modified2.csv')\n",
    "\n",
    "st.title('고객 이탈 예측 대시보드')\n",
    "\n",
    "# 데이터프레임의 열 확인\n",
    "st.write(\"데이터프레임의 열:\", df.columns.tolist())\n",
    "\n",
    "# 1. 신규 고객 데이터 입력\n",
    "st.header('1. 신규 고객 데이터 입력')\n",
    "columns = df.columns.tolist()\n",
    "columns = [col for col in columns if col not in ['고객이탈여부', '고객ID']]  # 예측에 사용하지 않을 열 제외\n",
    "\n",
    "new_customer = {}\n",
    "for col in columns:\n",
    "    if df[col].dtype == 'object':\n",
    "        options = df[col].unique().tolist()\n",
    "        new_customer[col] = st.selectbox(f'{col} 선택', options)\n",
    "    else:\n",
    "        new_customer[col] = st.number_input(f'{col} 입력', value=float(df[col].mean()))\n",
    "\n",
    "# 2. 이탈 확률 예측\n",
    "if st.button('이탈 확률 예측'):\n",
    "    input_data = pd.DataFrame([new_customer])\n",
    "    \n",
    "    # 범주형 변수 인코딩\n",
    "    for col in input_data.select_dtypes(include=['object']):\n",
    "        input_data[col] = input_data[col].astype('category').cat.codes\n",
    "    \n",
    "    churn_prob = model.predict_proba(input_data)[0][1]\n",
    "    st.write(f'이 고객의 이탈 확률은 {churn_prob:.2%}입니다.')\n",
    "\n",
    "    # 3. 분포 시각화\n",
    "    st.header('3. 고객 데이터 분포 비교')\n",
    "    numeric_cols = df.select_dtypes(include=[np.number]).columns.tolist()\n",
    "    selected_col = st.selectbox('비교할 특성 선택', numeric_cols)\n",
    "    \n",
    "    fig, ax = plt.subplots()\n",
    "    sns.histplot(data=df, x=selected_col, kde=True, ax=ax)\n",
    "    ax.axvline(new_customer[selected_col], color='r', linestyle='--')\n",
    "    ax.set_title(f'{selected_col} 분포')\n",
    "    st.pyplot(fig)\n",
    "\n",
    "    percentile = sum(df[selected_col] < new_customer[selected_col]) / len(df) * 100\n",
    "    st.write(f'이 고객의 {selected_col}는 상위 {100-percentile:.2f}%에 해당합니다.')\n",
    "\n",
    "    # 4. 기존 고객 평균과 비교\n",
    "    st.header('4. 기존 고객 평균과 비교')\n",
    "    fig, ax = plt.subplots(figsize=(10, 6))\n",
    "    x = np.arange(len(numeric_cols))\n",
    "    width = 0.35\n",
    "\n",
    "    avg_values = df[numeric_cols].mean()\n",
    "    new_values = [new_customer[col] for col in numeric_cols]\n",
    "\n",
    "    ax.bar(x - width/2, avg_values, width, label='기존 고객 평균')\n",
    "    ax.bar(x + width/2, new_values, width, label='신규 고객')\n",
    "\n",
    "    ax.set_xticks(x)\n",
    "    ax.set_xticklabels(numeric_cols, rotation=45, ha='right')\n",
    "    ax.legend()\n",
    "    ax.set_title('신규 고객과 기존 고객 평균 비교')\n",
    "\n",
    "    st.pyplot(fig)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
